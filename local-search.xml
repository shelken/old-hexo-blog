<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ffmpeg使用笔记</title>
    <link href="/2020/10/31/ffmpeg%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/31/ffmpeg%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>##常用</p><pre><code class="hljs bash"><span class="hljs-comment">#首先用这条命令生成文件</span><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> ./*.mp4; <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;file &#x27;<span class="hljs-variable">$f</span>&#x27;&quot;</span> &gt;&gt; mylist.txt; <span class="hljs-keyword">done</span>;ffmpeg -f concat -i mylist.txt -c copy myvideo.mp4<span class="hljs-comment">#-f 强制输入输出</span><span class="hljs-comment">#concat 好像就是个连接的指令</span><span class="hljs-comment">#-i input 文件里是要拼接的视频路径。</span><span class="hljs-comment">#-c 指定输出编码模式，copy 即直接复制，比较快</span><span class="hljs-comment">#如果出现unsafe 的提示要加上 -safe 0</span>ffmpeg -f concat -safe 0 -i mylist.txt -c copy myvideo.mp4<span class="hljs-comment">#这个好像文件中使用相对地址就不会。</span></code></pre><p><a href="https://trac.ffmpeg.org/wiki/Concatenate">这里附上一个权威的链接</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>ffmpeg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>十大经典排序算法（动图演示）</title>
    <link href="/2020/10/27/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA%EF%BC%89/"/>
    <url>/2020/10/27/%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E5%8A%A8%E5%9B%BE%E6%BC%94%E7%A4%BA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="0-算法概述"><a href="#0-算法概述" class="headerlink" title="0.算法概述"></a>0.算法概述</h3><hr><h4 id="0-1-算法分类"><a href="#0-1-算法分类" class="headerlink" title="0.1 算法分类"></a>0.1 算法分类</h4><p> 十种常见排序算法可以分为两大类：</p><blockquote><p><strong>非线性时间比较类排序</strong>：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。 <strong>线性时间非比较类排序</strong>：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。</p></blockquote><p><img src="https://i.loli.net/2020/10/27/wlTBd1WHLqpKtSm.png" alt="img"></p><h4 id="0-2-算法复杂度"><a href="#0-2-算法复杂度" class="headerlink" title="0.2 算法复杂度"></a>0.2 算法复杂度</h4><p><img src="https://i.loli.net/2020/10/27/LCf1lkjHoUWFA5O.png" alt="img"></p><h4 id="0-3-相关概念"><a href="#0-3-相关概念" class="headerlink" title="0.3 相关概念"></a>0.3 相关概念</h4><blockquote><p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</p></blockquote><p><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面。  <strong>时间复杂度</strong>：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。  <strong>空间复杂度</strong>：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</p><h3 id="1、冒泡排序（Bubble-Sort）"><a href="#1、冒泡排序（Bubble-Sort）" class="headerlink" title="1、冒泡排序（Bubble Sort）"></a>1、冒泡排序（Bubble Sort）</h3><hr><p> 冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h4 id="1-1-算法描述"><a href="#1-1-算法描述" class="headerlink" title="1.1 算法描述"></a>1.1 算法描述</h4><ul><li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li><li>针对所有的元素重复以上的步骤，除了最后一个；</li><li>重复步骤1~3，直到排序完成。</li></ul><h4 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif" alt="img"></p><h4 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h4><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] Bubble_Sort(<span class="hljs-keyword">int</span>[] arr) &#123;    <span class="hljs-keyword">int</span> len  = arr.length;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++) &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j &lt; len - <span class="hljs-number">1</span> - i;j++) &#123;            <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;                <span class="hljs-keyword">int</span> tmp = arr[j + <span class="hljs-number">1</span>];                arr[j + <span class="hljs-number">1</span>] = arr[j];                arr[j] = tmp;            &#125;        &#125;    &#125;    <span class="hljs-keyword">return</span> arr;&#125;</code></pre><h3 id="2、选择排序（Selection-Sort）"><a href="#2、选择排序（Selection-Sort）" class="headerlink" title="2、选择排序（Selection Sort）"></a>2、选择排序（Selection Sort）</h3><hr><p> 选择排序(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p><h4 id="2-1-算法描述"><a href="#2-1-算法描述" class="headerlink" title="2.1 算法描述"></a>2.1 算法描述</h4><p> n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p><ul><li>初始状态：无序区为R[1..n]，有序区为空；</li><li>第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1..i-1]和R(i..n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i+1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li><li>n-1趟结束，数组有序化了。</li></ul><h4 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h4><p><img src="https://i.loli.net/2020/10/27/4YTtxUuRNEADveX.gif" alt="img"></p><h4 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h4><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> int[] Selection_Sort(int[] arr) &#123;    int len  = arr.length;    int minIdx,tmp;    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>;i &lt; len - <span class="hljs-number">1</span>;i++) &#123;        minIdx = i;        <span class="hljs-keyword">for</span>(int j = i + <span class="hljs-number">1</span>;j &lt; len;j++) &#123;            <span class="hljs-keyword">if</span>(arr[j] &lt; arr[minIdx])                 minIdx = j;        &#125;        tmp = arr[i];        arr[i] = arr[minIdx];        arr[minIdx] = tmp;    &#125;    <span class="hljs-keyword">return</span> arr;&#125;</code></pre><h4 id="2-4-算法分析"><a href="#2-4-算法分析" class="headerlink" title="2.4 算法分析"></a>2.4 算法分析</h4><p> 表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><h3 id="3、插入排序（Insertion-Sort）"><a href="#3、插入排序（Insertion-Sort）" class="headerlink" title="3、插入排序（Insertion Sort）"></a>3、插入排序（Insertion Sort）</h3><hr><p> 插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h4 id="3-1-算法描述"><a href="#3-1-算法描述" class="headerlink" title="3.1 算法描述"></a>3.1 算法描述</h4><p> 一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p><ul><li>从第一个元素开始，该元素可以认为已经被排序；</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li><li>将新元素插入到该位置后；</li><li>重复步骤2~5。</li></ul><h4 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015225645277-1151100000.gif" alt="img"></p><h4 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h4><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> int[] Selection_Sort(int[] arr) &#123;    int len  = arr.length;    int preIdx,current;    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">1</span>;i &lt; len;i++) &#123;        preIdx = i - <span class="hljs-number">1</span>;        current = arr[i];        <span class="hljs-keyword">while</span>(preIdx &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[preIdx] &gt; current) &#123;            arr[preIdx + <span class="hljs-number">1</span>] = arr[preIdx];            preIdx--;        &#125;        arr[preIdx + <span class="hljs-number">1</span>] = current;    &#125;    <span class="hljs-keyword">return</span> arr;&#125;</code></pre><h4 id="3-4-算法分析"><a href="#3-4-算法分析" class="headerlink" title="3.4 算法分析"></a>3.4 算法分析</h4><p> 插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h3 id="4、希尔排序（Shell-Sort）"><a href="#4、希尔排序（Shell-Sort）" class="headerlink" title="4、希尔排序（Shell Sort）"></a>4、希尔排序（Shell Sort）</h3><hr><p> 1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p><h4 id="4-1-算法描述"><a href="#4-1-算法描述" class="headerlink" title="4.1 算法描述"></a>4.1 算法描述</h4><p> 先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><h4 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h4><p><img src="https://i.loli.net/2020/10/27/YCXeLwvWIRqkNpm.gif" alt="img"></p><h4 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h4><pre><code class="hljs javascript"><span class="hljs-keyword">static</span> int[] Shell_Sort(int[] arr) &#123;    int len  = arr.length;    int i,j,gap;    <span class="hljs-keyword">for</span>(gap = len/<span class="hljs-number">2</span>; gap &gt; <span class="hljs-number">0</span>; gap /= <span class="hljs-number">2</span>) &#123;        <span class="hljs-keyword">for</span>(i = gap; i &lt; len; i++) &#123;            int num = arr[i];            <span class="hljs-keyword">for</span>(j = i-gap; j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j]&gt;num; j-=gap)                arr[j+gap] = arr[j];            arr[j+gap] = num;        &#125;    &#125;    <span class="hljs-keyword">return</span> arr;&#125;</code></pre><h4 id="4-4-算法分析"><a href="#4-4-算法分析" class="headerlink" title="4.4 算法分析"></a>4.4 算法分析</h4><p> 希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。</p><h3 id="5、归并排序（Merge-Sort）"><a href="#5、归并排序（Merge-Sort）" class="headerlink" title="5、归并排序（Merge Sort）"></a>5、归并排序（Merge Sort）</h3><hr><p> 归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p><h4 id="5-1-算法描述"><a href="#5-1-算法描述" class="headerlink" title="5.1 算法描述"></a>5.1 算法描述</h4><ul><li>把长度为n的输入序列分成两个长度为n/2的子序列；</li><li>对这两个子序列分别采用归并排序；</li><li>将两个排序好的子序列合并成一个最终的排序序列。</li></ul><h4 id="5-2-动图演示"><a href="#5-2-动图演示" class="headerlink" title="5.2 动图演示"></a>5.2 动图演示</h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230557043-37375010.gif" alt="img"></p><h4 id="5-3-代码实现"><a href="#5-3-代码实现" class="headerlink" title="5.3 代码实现"></a>5.3 代码实现</h4><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] seq, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;    <span class="hljs-keyword">if</span> (left &lt; right) &#123;        <span class="hljs-keyword">int</span> middle = (left + right) / <span class="hljs-number">2</span>;        merge_sort(seq, left, middle);        merge_sort(seq, middle + <span class="hljs-number">1</span>, right);        merge(seq, left, right);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] seq, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;    <span class="hljs-keyword">int</span> mid = (l + r) / <span class="hljs-number">2</span>;    <span class="hljs-keyword">int</span> i = l;    <span class="hljs-keyword">int</span> j = mid + <span class="hljs-number">1</span>;    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> temp[] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[r - l + <span class="hljs-number">1</span>];    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;        <span class="hljs-keyword">if</span> (seq[i] &lt; seq[j])             temp[count++] = seq[i++];        <span class="hljs-keyword">else</span>             temp[count++] = seq[j++];    &#125;    <span class="hljs-keyword">while</span> (i &lt;= mid)         temp[count++] = seq[i++];    <span class="hljs-keyword">while</span> (j &lt;= r)         temp[count++] = seq[j++];    count = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (l &lt;= r)         seq[l++] = temp[count++];&#125;</code></pre><h4 id="5-4-算法分析"><a href="#5-4-算法分析" class="headerlink" title="5.4 算法分析"></a>5.4 算法分析</h4><p> 归并排序是一种稳定的排序方法。和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(nlogn）的时间复杂度。代价是需要额外的内存空间。</p><h3 id="6、快速排序（Quick-Sort）"><a href="#6、快速排序（Quick-Sort）" class="headerlink" title="6、快速排序（Quick Sort）"></a>6、快速排序（Quick Sort）</h3><hr><p> 快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h4 id="6-1-算法描述"><a href="#6-1-算法描述" class="headerlink" title="6.1 算法描述"></a>6.1 算法描述</h4><p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p><ul><li>从数列中挑出一个元素，称为 “基准”（pivot）；</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ul><h4 id="6-2-动图演示"><a href="#6-2-动图演示" class="headerlink" title="6.2 动图演示"></a>6.2 动图演示</h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230936371-1413523412.gif" alt="img"></p><h4 id="6-3-代码实现"><a href="#6-3-代码实现" class="headerlink" title="6.3 代码实现"></a>6.3 代码实现</h4><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;     <span class="hljs-keyword">if</span>(a.length&gt;<span class="hljs-number">0</span>)         quick_sort(a, <span class="hljs-number">0</span> , a.length-<span class="hljs-number">1</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> igh)</span> </span>&#123;    <span class="hljs-keyword">if</span>(low &gt; high)        <span class="hljs-keyword">return</span>;      <span class="hljs-keyword">int</span> i = low;     <span class="hljs-keyword">int</span> j = high;    <span class="hljs-keyword">int</span> key = a[low];    <span class="hljs-keyword">while</span>(i &lt; j) &#123;          <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt; key)              j--;            <span class="hljs-keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt;= key)             i++;          <span class="hljs-keyword">if</span>(i &lt; j) &#123;              <span class="hljs-keyword">int</span> p = a[i];              a[i] = a[j];              a[j] = p;          &#125;    &#125;    <span class="hljs-keyword">int</span> p = a[i];    a[i] = a[low];    a[low] = p;    quick_sort(a,low,i - <span class="hljs-number">1</span> );      quick_sort(a,i + <span class="hljs-number">1</span>,high);  &#125;</code></pre><h3 id="7、堆排序（Heap-Sort）"><a href="#7、堆排序（Heap-Sort）" class="headerlink" title="7、堆排序（Heap Sort）"></a>7、堆排序（Heap Sort）</h3><hr><p> 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><h4 id="7-1-算法描述"><a href="#7-1-算法描述" class="headerlink" title="7.1 算法描述"></a>7.1 算法描述</h4><ul><li>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li><li>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li><li>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li></ul><h4 id="7-2-动图演示"><a href="#7-2-动图演示" class="headerlink" title="7.2 动图演示"></a>7.2 动图演示</h4><p><img src="https://i.loli.net/2020/10/27/6tY2pXnjoRVCryB.gif" alt="img"></p><h4 id="7-3-代码实现"><a href="#7-3-代码实现" class="headerlink" title="7.3 代码实现"></a>7.3 代码实现</h4><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">adjustHeap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> len)</span> </span>&#123;    <span class="hljs-keyword">int</span> temp, j;    temp = a[i];    <span class="hljs-keyword">for</span> (j = <span class="hljs-number">2</span> * i; j &lt; len; j *= <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">// 沿关键字较大的孩子结点向下筛选</span>        <span class="hljs-keyword">if</span> (j &lt; len &amp;&amp; a[j] &lt; a[j + <span class="hljs-number">1</span>])            ++j; <span class="hljs-comment">// j为关键字中较大记录的下标</span>        <span class="hljs-keyword">if</span> (temp &gt;= a[j])            <span class="hljs-keyword">break</span>;        a[i] = a[j];        i = j;    &#125;    a[i] = temp;&#125;<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;    <span class="hljs-keyword">int</span> i;    <span class="hljs-keyword">for</span> (i = a.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)     <span class="hljs-comment">//构建一个大顶堆</span>        adjustHeap(a, i, a.length - <span class="hljs-number">1</span>);    <span class="hljs-keyword">for</span> (i = a.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<span class="hljs-comment">// 将堆顶记录和当前未经排序子序列的最后一个记录交换</span>        <span class="hljs-keyword">int</span> temp = a[<span class="hljs-number">0</span>];        a[<span class="hljs-number">0</span>] = a[i];        a[i] = temp;        adjustHeap(a, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);<span class="hljs-comment">// 将a中前i-1个记录重新调整为大顶堆</span>    &#125;&#125;</code></pre><h3 id="8、计数排序（Counting-Sort）"><a href="#8、计数排序（Counting-Sort）" class="headerlink" title="8、计数排序（Counting Sort）"></a>8、计数排序（Counting Sort）</h3><hr><p> 计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><h4 id="8-1-算法描述"><a href="#8-1-算法描述" class="headerlink" title="8.1 算法描述"></a>8.1 算法描述</h4><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li></ul><h4 id="8-2-动图演示"><a href="#8-2-动图演示" class="headerlink" title="8.2 动图演示"></a>8.2 动图演示</h4><p><img src="https://i.loli.net/2020/10/27/KfQD62BdGkJz5WP.gif" alt="img"></p><h4 id="8-3-代码实现"><a href="#8-3-代码实现" class="headerlink" title="8.3 代码实现"></a>8.3 代码实现</h4><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">countSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array, <span class="hljs-keyword">int</span> range)</span> </span>&#123;<span class="hljs-comment">//range是数组中的最大值</span>    <span class="hljs-keyword">int</span>[] countArray = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[range + <span class="hljs-number">1</span>];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;        <span class="hljs-keyword">int</span> value = array[i];        countArray[value] += <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; countArray.length; i++)         countArray[i] += countArray[i - <span class="hljs-number">1</span>];    <span class="hljs-keyword">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[array.length];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = array.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;        <span class="hljs-keyword">int</span> value = array[i];        <span class="hljs-keyword">int</span> position = countArray[value] - <span class="hljs-number">1</span>;        temp[position] = value;        countArray[value] -= <span class="hljs-number">1</span>;    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++)         array[i] = temp[i];&#125;</code></pre><h4 id="8-4-算法分析"><a href="#8-4-算法分析" class="headerlink" title="8.4 算法分析"></a>8.4 算法分析</h4><p> 计数排序是一个稳定的排序算法。当输入的元素是 n 个 0到 k 之间的整数时，时间复杂度是O(n+k)，空间复杂度也是O(n+k)，其排序速度快于任何比较排序算法。当k不是很大并且序列比较集中时，计数排序是一个很有效的排序算法。</p><h3 id="9、桶排序（Bucket-Sort）"><a href="#9、桶排序（Bucket-Sort）" class="headerlink" title="9、桶排序（Bucket Sort）"></a>9、桶排序（Bucket Sort）</h3><hr><p> 桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。桶排序 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排）。</p><h4 id="9-1-算法描述"><a href="#9-1-算法描述" class="headerlink" title="9.1 算法描述"></a>9.1 算法描述</h4><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。</li></ul><h4 id="9-2-图片演示"><a href="#9-2-图片演示" class="headerlink" title="9.2 图片演示"></a>9.2 图片演示</h4><p><img src="https://i.loli.net/2020/10/27/iKu5aonvAGbkcyR.png" alt="img"></p><h4 id="9-3-代码实现"><a href="#9-3-代码实现" class="headerlink" title="9.3 代码实现"></a>9.3 代码实现</h4><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bucketSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> max)</span> </span>&#123;    <span class="hljs-keyword">int</span>[] buckets;    <span class="hljs-keyword">if</span> (a == <span class="hljs-keyword">null</span> || max &lt; <span class="hljs-number">1</span>)        <span class="hljs-keyword">return</span>;    <span class="hljs-comment">// 创建一个容量为max的数组buckets，并且将buckets中的有数据都初始化为0。</span>    buckets = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[max + <span class="hljs-number">1</span>];    <span class="hljs-comment">// 1. 计数</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; a.length;i++)         buckets[a[i]]++;     <span class="hljs-comment">// 2. 排序</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;i &lt;= max;i++)         <span class="hljs-keyword">while</span>((buckets[i]--) &gt; <span class="hljs-number">0</span>)             a[j++] = i;    buckets = <span class="hljs-keyword">null</span>;&#125;</code></pre><h4 id="9-4-算法分析"><a href="#9-4-算法分析" class="headerlink" title="9.4 算法分析"></a>9.4 算法分析</h4><p> 桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p><h3 id="10、基数排序（Radix-Sort）"><a href="#10、基数排序（Radix-Sort）" class="headerlink" title="10、基数排序（Radix Sort）"></a>10、基数排序（Radix Sort）</h3><hr><p> 基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p><h4 id="10-1-算法描述"><a href="#10-1-算法描述" class="headerlink" title="10.1 算法描述"></a>10.1 算法描述</h4><ul><li>取得数组中的最大数，并取得位数；</li><li>arr为原始数组，从最低位开始取每个位组成radix数组；</li><li>对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li></ul><h4 id="10-2-动图演示"><a href="#10-2-动图演示" class="headerlink" title="10.2 动图演示"></a>10.2 动图演示</h4><p><img src="https://i.loli.net/2020/10/27/naupTNYZeg6MDVB.gif" alt="img"></p><h4 id="10-3-代码实现"><a href="#10-3-代码实现" class="headerlink" title="10.3 代码实现"></a>10.3 代码实现</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] bucketSort(<span class="hljs-keyword">int</span>[] array) &#123;        <span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">11</span>];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++)             <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; array.length; j++)                 <span class="hljs-keyword">if</span> (array[j] == i)                     a[i] += <span class="hljs-number">1</span>;        <span class="hljs-keyword">return</span> a;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Main bucket = <span class="hljs-keyword">new</span> Main();        <span class="hljs-keyword">int</span>[] array = &#123; <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span> &#125;;        <span class="hljs-keyword">int</span>[] a = bucket.bucketSort(array);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = a.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)             <span class="hljs-keyword">if</span> (a[i] &gt; <span class="hljs-number">0</span>)                 <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i]; j++)                    System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);    &#125;&#125;</code></pre><h4 id="10-4-算法分析"><a href="#10-4-算法分析" class="headerlink" title="10.4 算法分析"></a>10.4 算法分析</h4><p> 基数排序基于分别排序，分别收集，所以是稳定的。但基数排序的性能比桶排序要略差，每一次关键字的桶分配都需要O(n)的时间复杂度，而且分配之后得到新的关键字序列又需要O(n)的时间复杂度。假如待排数据可以分为d个关键字，则基数排序的时间复杂度将是O(d*2n) ，当然d要远远小于n，因此基本上还是线性级别的。基数排序的空间复杂度为O(n+k)，其中k为桶的数量。一般来说n&gt;&gt;k，因此额外空间需要大概n个左右。</p><h4 id="参考：链接"><a href="#参考：链接" class="headerlink" title="参考：链接"></a>参考：<a href="https://www.cnblogs.com/onepixel/articles/7674659.html">链接</a></h4>]]></content>
    
    
    
    <tags>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud 学习笔记</title>
    <link href="/2020/10/26/SpringCloud-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/26/SpringCloud-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前期配置"><a href="#前期配置" class="headerlink" title="前期配置"></a>前期配置</h1><p>###大概</p><p>创一个主配置 pom，让子 pom 来继承主 pom。所有子模块继承</p><p>练手：支付模块 8001 与订单模块 80，80用 restTemplate 来调用 8001 中的服务，</p><p>项目创建流程：</p><ol><li>创建 module ，</li><li>修改 pom 文件，引入所需要的依赖。</li><li>写配置文件 yaml</li><li>加入主启动 main 方法</li><li>进行业务代码编写（Controller，dao，bean，service等）</li></ol><h3 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h3><p>将重复的代码重构（就是将代码分离重新建个通用的子项目，让其他项目引用依赖）</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>有一个地方需要注意，@requestBody 这个注解接受的是 json，所以写params 会无效的，得发送 json。</li><li>datasource 里的数据库密码如果全数字需要加双引号</li><li>mabatis 部分知识点：<ol><li>insert ，id，parameterType（DAO 中参数的类型）,useGeneratedKeys（使用自动生成）,keyProperty（主键）》</li><li>resultMap ，id,type》id column（表字段），property（对象的属性），jdbcType》</li><li>select，resultMap（指定映射的 resultMap）》</li></ol></li></ol><h1 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h1><p>特点：集群，高可用，</p><p>服务注册与服务发现，客户端需要通过服务注册注册到服务端中，需要通过服务发现获取其他服务的地址。提供者提供服务，消费者消费服务。消费者通过远程调用服务。客户端默认 30 秒更新一次其他服务的地址</p><p>集群注册原理：互相注册，相互守望。</p><p>实操：共有两个 eureka 服务端，两个 provider 客户端，一个consumer 客户端。</p><p>将两个 eureka 服务端两两注册，7001，7002 。yaml 改端口，改 hostname，修改defaultZone为其他的 server</p><p>然后修改所有客户端，相同的provider 共享相同的application 名字，对于 defaultZone，provider 需要指定 eureka server的地址。</p><p>例如：<a href="http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</a></p><p>对于 consumer 端，在 restTemplate 里需要开启负载均衡功能才能使用以下格式的方式拉访问服务：只需要知道 application name 就行，剩下的主机和端口让 eureka 来分配。</p><p><img src="https://i.loli.net/2020/10/19/FjGlmgOQ1hcsXIb.png" alt="image-20201019133520495"></p><p><img src="https://i.loli.net/2020/10/19/v5OLhTClRQasd9w.png" alt="image-20201019133816299"></p><ul><li>关闭eureka 自我保护 ，在服务端配置写上eureka.server.enbale-self-preservation=false可以禁止自我保护</li><li><strong>enable-self-preservation</strong> : <strong>false    eviction-interval-timer-in-ms</strong> : 2000 （清除间隔时间）</li></ul><pre><code class="hljs yaml"><span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#心跳时间</span><span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">2</span> <span class="hljs-comment">#掉线清除时间</span></code></pre><h1 id="Zookper"><a href="#Zookper" class="headerlink" title="Zookper"></a>Zookper</h1><p>版本：3.4.9</p><ol><li>加入 spring-cloud-starter-zookeeper-discovery 包，排除掉 3.5.3的包，重新加入 3.4.9。</li><li><img src="https://i.loli.net/2020/10/20/hBUFg9TeysOzvGl.png" alt="image-20201020092817749"></li></ol><p>连接到 zookeeper。</p><ol start="3"><li>主程序加入@EnableDiscoveryClient 注解</li><li>连接到<img src="https://i.loli.net/2020/10/20/OfqJWwIHG3zhDLY.png" alt="image-20201020093200489"></li></ol><p>zookeeper 遵循 cap 中的 cp。eureka 遵循 ap。</p><p>zookeeper 会直接移除没用的节点。</p><h1 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h1><p>差不多跟上面一样</p><h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><p>属于进程内负载均衡，与集中式负载均衡不同。客户端从服务端发现其他的服务 ，然后选择一个合适的服务器。</p><p><img src="https://i.loli.net/2020/10/20/4tKuhdq2f6ZTxi3.png" alt="image-20201020202238955"></p><p>负载均衡七种算法。</p><p><img src="https://i.loli.net/2020/10/20/MpyrzncGlgVwsTo.png" alt="image-20201020202828184"></p><p>xxxforObject 与 xxxforEntity 区别在于，前者只获得一个对象信息，后者获得包括返回的对象以及一些状态信息，例如 header，status等。</p><ul><li>注意点：</li><li>ribbon 指定其他的 Irule 时候，注解里的RibbonClient的 name 必须和调用这个服务的名称必须一致，大小写敏感。例如在 ordercontroller 里使用到这个服务时。</li><li><img src="https://i.loli.net/2020/10/20/c4oWZtGFSCRM27z.png" alt="image-20201020210345442"></li></ul><pre><code class="hljs java"><span class="hljs-comment">//替换掉默认的轮询算法。</span><span class="hljs-meta">@RibbonClient</span> ( name  =  <span class="hljs-string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span> , configuration  = MySelfRule. <span class="hljs-class"><span class="hljs-keyword">class</span> </span></code></pre><p>手写一个 ribbon 的负载均衡算法。</p><h1 id="OpenFeign"><a href="#OpenFeign" class="headerlink" title="OpenFeign"></a>OpenFeign</h1><p>开启 feign</p><p><img src="https://i.loli.net/2020/10/26/m7DLKpd2vTk9wZG.png" alt="image-20201021170058363"></p><p>然后将提供者的 api 与我们的接口对应。feign 帮我们完成类似于 resttemplat 的工作，并且实现负载均衡</p><p><img src="https://i.loli.net/2020/10/26/fXYzT9JHPt7yUV4.png" alt="image-20201021170421029"></p><p>这里是控制类，实现用户接口调用。</p><p><img src="https://i.loli.net/2020/10/21/bzI2G1YB79gnUZM.png" alt="image-20201021170624755"></p><p>feign详细日志：</p><p><img src="https://i.loli.net/2020/10/21/sbAQcuJ8tU1YmEx.png" alt="image-20201021172104947"></p><p><img src="https://i.loli.net/2020/10/26/aq4UET3Bf5i2tAw.png" alt="image-20201021172118163"></p><h1 id="Hystrix-断路器-降级-实时监视"><a href="#Hystrix-断路器-降级-实时监视" class="headerlink" title="Hystrix 断路器 降级 实时监视"></a>Hystrix 断路器 降级 实时监视</h1><p>如果一个服务超时了或者出错等原因导致消费端出现等待情况，应该服务降级，应返回用户一个备选方案，而不是持续连接占用资源和浪费消费端时间。返回一些更友好的提示。</p><p><img src="https://i.loli.net/2020/10/26/JjKA85H9LV2PzT1.png" alt="image-20201022004743699"></p><p><img src="https://i.loli.net/2020/10/22/w8xfdjyZBpgKnoA.png" alt="image-20201022004642186"></p><p>在服务端开启服务降级，在客户端开启服务降级。</p><p><img src="https://i.loli.net/2020/10/22/G8kWiz2V4HOtQMn.png" alt="image-20201022193017683"></p><p>通过一个全局注解来配置一个方法作为所有出现问题的fallback，这个里面的配置都是默认值。</p><p>也可以实现一个服务的接口，然后用 openfeign 的 fallback 来实现，多个方法对应多个不同降级。</p><p><img src="https://i.loli.net/2020/10/22/ribLAB85x6OyCRt.png" alt="image-20201022193445110"></p><p>服务熔断：</p><p><img src="https://i.loli.net/2020/10/26/vb3kDOexNs5BXyG.png" alt="image-20201022193800408"></p><p><img src="https://i.loli.net/2020/10/22/NbokR7xK25ZIcmE.png" alt="image-20201022224757930"></p><p>可以再配置里指定某个服务某个方法 hystrix 的配置。</p><p>服务限流：阿里巴巴那边讲</p><p>#网关gateway</p><ul><li>路由：</li></ul><p><img src="https://i.loli.net/2020/10/23/mLMxVaujwU8oNCp.png" alt="image-20201023111120322"></p><p><img src="https://i.loli.net/2020/10/24/7YXJQLjwdrCA9ai.png" alt="image-20201024000456024"></p><p><img src="https://i.loli.net/2020/10/23/pmSP3BvxahIoWlV.png" alt="image-20201023112044574"></p><ul><li><p>断言predicate</p><p><img src="https://i.loli.net/2020/10/24/OIznK76PtpyAqgR.png" alt="image-20201024000211408"></p></li><li><p>过滤器</p></li></ul><p>gateway与 globalgateway</p><h1 id="SpringCloud-Config"><a href="#SpringCloud-Config" class="headerlink" title="SpringCloud Config"></a>SpringCloud Config</h1><p><img src="https://i.loli.net/2020/10/24/CQgITGWYp3slayd.png" alt="image-20201024185659784"></p><p>客户端配置 动态刷新：</p><p>发送 post 到/actuator/refresh。将@RefreshScope 更新。前提是有 actuator</p><h1 id="消息总线-SpringCloud-Bus"><a href="#消息总线-SpringCloud-Bus" class="headerlink" title="消息总线 SpringCloud Bus"></a>消息总线 SpringCloud Bus</h1><p>通过 post 方式刷新 config-server 的方式同时刷新其他的 client。用了 rabbitmq的原理</p><p>bus 在配置的时候应注意，客户端应该在 boostrap 里面来连接 server 端。用到以下配置：</p><p>bootstrap.yaml:</p><p><img src="https://i.loli.net/2020/10/25/TgdyVArUtwIi8hW.png" alt="bootstrap.yaml"></p><p><img src="https://i.loli.net/2020/10/25/oyajbuNFxUmBIis.png" alt="image-20201025020833709"></p><p>label分支，name可以为当前服务名，profile 为“-”后面的字符，一般为 dev,prod等组成。根据实际配置可以更改。</p><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><p>##架构</p><p><img src="https://i.loli.net/2020/10/28/poZLxnvUSGJ1yT6.jpg" alt="nacos_data_model"></p><p><img src="https://i.loli.net/2020/10/28/NPBE4pbx7tYyVOu.jpg" alt="nacos_naming_data_model"></p><p><img src="https://i.loli.net/2020/10/27/qhn7z9aT5JRrXtM.png" alt="image-20201027031151017"></p><p><img src="https://i.loli.net/2020/10/27/oyHtLEOfhiNx6Dq.png" alt="image-20201027031542587"></p><h2 id="集群部署声明"><a href="#集群部署声明" class="headerlink" title="集群部署声明"></a>集群部署声明</h2><p><a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">官方教程</a></p><p><img src="https://i.loli.net/2020/10/28/RUvJ6OCmHcaLMb1.jpg" alt="deployDnsVipMode.jpg"></p><p><strong>这里的 VIP 用 nginx 实现</strong></p><h3 id="配置多集群-nacos"><a href="#配置多集群-nacos" class="headerlink" title="配置多集群 nacos"></a>配置多集群 nacos</h3><p>教训：搞了好久的 docker 但是一直失败，索性放弃。不知为何nacos 总是找不到数据库。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p>下载 nacos-server1.1.4 , 解压。 </p></li><li><p>修改 application.propertities</p><p><img src="https://i.loli.net/2020/10/28/R2SkEHOxAW9JPm1.png" alt="image-20201028222405820"></p></li></ol><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.platform</span>=<span class="hljs-string">mysql  #指定平台，而不是用内置 derby</span><span class="hljs-meta">db.num</span>=<span class="hljs-string">1 #数据库个数</span><span class="hljs-meta">db.url.0</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/nacos_devtest?characterEncoding=utf8   #数据库uri</span><span class="hljs-meta">db.user</span>=<span class="hljs-string">root</span><span class="hljs-meta">db.password</span>=<span class="hljs-string">123456</span></code></pre><ol start="3"><li><p>修改 startup.sh （让其支持自定义 port，才能在一个机器上模拟）</p><p><img src="https://i.loli.net/2020/10/28/QrmoFe1MDPZOuhK.png" alt="image-20201028223800541"></p><p><img src="https://i.loli.net/2020/10/28/9W5baxVGnTJRde8.png" alt="image-20201028224141056"></p><pre><code class="hljs ba">原理也很简单，加入参数之后直接参数启动。</code></pre></li></ol><ol start="4"><li><p>修改 cluster.conf 文件</p><pre><code class="hljs pro">192.168.6.2:8848192.168.6.2:8849192.168.6.2:8850</code></pre><p>加入将要启动的nacos集群的 url。</p><p>直接启动连接到 mysql，成功连接（启动前记得初始化mysql 里的数据库）</p><p>之后配置就可以持久化到我们 mysql 数据库。</p></li></ol><p>###配置 nginx</p><ol><li><pre><code>upstream cluster&#123;        # server 192.168.6.2:8848;        # server 192.168.6.2:8848;        # server 192.168.6.2:8848;        server 172.20.10.3:8848;        server 172.20.10.3:8849;        server 172.20.10.3:8850;    &#125;    server &#123;        listen       1111;        server_name  localhost;        #charset koi8-r;        #access_log  logs/host.access.log  main;        location / &#123;            # root   html;            # index  index.html index.htm;            proxy_pass http://cluster;        &#125;&#125;<pre><code class="hljs yaml"><span class="hljs-number">2</span><span class="hljs-string">.</span> <span class="hljs-string">启动</span> <span class="hljs-string">nginx，完成转发，负载均衡。</span><span class="hljs-comment">### 修改 provider 服务的配置</span><span class="hljs-string">```yaml</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">test</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-provider-payment</span>  <span class="hljs-attr">cloud:</span>    <span class="hljs-attr">nacos:</span>      <span class="hljs-attr">discovery:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:1111</span>      <span class="hljs-attr">config:</span>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:1111</span>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span></code></pre></code></pre></li></ol><p><strong>修改 server-addr 将其指向 nginx 地址</strong></p><h1 id="Sentinel-熔断与限流"><a href="#Sentinel-熔断与限流" class="headerlink" title="Sentinel 熔断与限流"></a>Sentinel 熔断与限流</h1><h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><ol><li>下载 github 官方 sentinel dashboard。<a href="https://github.com/alibaba/Sentinel/releases">链接</a></li><li>使用命令运行 jar 包</li></ol><pre><code class="hljs bash">java -Dserver.port=2222 -jar xxx.jar</code></pre><ol start="3"><li>登录控制台</li></ol><h2 id="项目连接配置"><a href="#项目连接配置" class="headerlink" title="项目连接配置"></a>项目连接配置</h2><ol><li><pre><code class="yaml">spring:  application:    name: sentinel-service  cloud:    nacos:      discovery:        server-addr: localhost:1111#      config:#        server-addr: localhost:1111    sentinel:      transport:        dashboard: localhost:2222        port: 8719#指定的端口号spring.cloud.sentinel.transport.port将在应用程序的相应服务器上启动HTTP Server，并且该服务器将与Sentinel仪表板进行交互。例如，如果在Sentinel仪表板中添加了速率限制规则，则规则数据将被推送到HTTP Server并由HTTP Server接收，然后HTTP Server将规则注册到Sentinel。        <pre><code class="hljs xml">   上面👆配置了 `nacos` 和 `sentinel` 连接的地址```xml<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></code></pre></li></ol><p>👆配置了 pom</p><ol start="2"><li>在图中看到我们的实时监控和链路图</li></ol><p>   <img src="https://i.loli.net/2020/10/29/ZT4RbBDQuFgwoPJ.png" alt="image-20201029211853347"></p><h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><p><a href="https://blog.csdn.net/lzb348110175/article/details/107532937">流控规则详细</a></p><h2 id="熔断规则"><a href="#熔断规则" class="headerlink" title="熔断规则"></a>熔断规则</h2><p>注意：sentinel 无半开状态。(最新 1.8说有了 <a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7#%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5">查看</a>)</p><p><img src="https://i.loli.net/2020/10/30/AQpIoKjrwMzlDBe.png" alt="image-20201030140905203"></p><p>依然查看这个<a href="https://blog.csdn.net/lzb348110175/article/details/107532937">熔断详细</a></p><p>##热点规则</p><p><img src="https://i.loli.net/2020/10/30/TIbK1gNsVwSHr2D.png" alt="image-20201030232651118"></p><p><img src="https://i.loli.net/2020/10/30/WMh2jFoTJkgOiqN.png" alt="image-20201030232734395"></p><p>当带有此参数时会有限流效果，没有则无。</p><p>fallback与 blockhandler 区别：一个是处理除了 blockexception的错误，另一个是处理其他错误。</p><p><img src="https://i.loli.net/2020/10/31/j4rOcBhA3X2Nq9Z.png" alt="image-20201031024910898"></p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">SentinelResource 注解支持</a></p><h2 id="SentinelResource-注解"><a href="#SentinelResource-注解" class="headerlink" title="SentinelResource 注解"></a>SentinelResource 注解</h2><h2 id="SentinelResource-属性介绍"><a href="#SentinelResource-属性介绍" class="headerlink" title="@SentinelResource 属性介绍"></a>@SentinelResource 属性介绍</h2><p>（高亮标注属性为常用属性）表格转自前面链接的博主</p><table><thead><tr><th>属性名</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td><code>value</code></td><td>是</td><td>资源名称 。（必填项，需要通过 <code>value</code> 值找到对应的规则进行配置）</td></tr><tr><td>entryType</td><td>否</td><td>entry类型，标记流量的方向，取值IN/OUT，默认是OUT</td></tr><tr><td><code>blockHandler</code></td><td>否</td><td>**处理BlockException的函数名称(可以理解为对Sentinel的配置进行方法兜底)**。函数要求： 1.必须是 public 修饰 2.返回类型与原方法一致 3. 参数类型需要和原方法相匹配，并在最后加 BlockException 类型的参数。 4. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 blockHandlerClass ，并指定blockHandlerClass里面的方法。</td></tr><tr><td><code>blockHandlerClass</code></td><td>否</td><td><strong>存放blockHandler的类</strong>。 对应的处理函数必须 public static 修饰，否则无法解析，其他要求：同blockHandler。</td></tr><tr><td><code>fallback</code></td><td>否</td><td>**用于在抛出异常的时候提供fallback处理逻辑(可以理解为对Java异常情况方法兜底)**。 fallback函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。函数要求： 1.返回类型与原方法一致 2.参数类型需要和原方法相匹配，Sentinel 1.6开始，也可在方法最后加 Throwable 类型的参数。 3.默认需和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定fallbackClass里面的方法。</td></tr><tr><td><code>fallbackClass</code></td><td>否</td><td><strong>存放fallback的类</strong>。 对应的处理函数必须static修饰，否则无法解析，其他要求：同fallback。</td></tr><tr><td><code>defaultFallback</code></td><td>否</td><td><strong>用于通用的 fallback 逻辑</strong>。 默认 fallback 函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准。函数要求： 1.返回类型与原方法一致 2.方法参数列表为空，或者有一个 Throwable 类型的参数。 3.默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置 fallbackClass ，并指定 fallbackClass 里面的方法。</td></tr><tr><td><code>exceptionsToIgnore</code></td><td>否</td><td><strong>指定排除掉哪些异常。</strong> 排除的异常不会计入异常统计，也不会进入fallback逻辑，而是原样抛出。</td></tr><tr><td>exceptionsToTrace</td><td>否</td><td>需要trace的异常</td></tr></tbody></table><p>##OpenFeign 与 Sentinel 的结合（类似于 Hystrix）</p><h1 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a>Seata</h1><blockquote><p>环境：mysql：5.6.47，seata 1.3，nacos：1.1.4</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
      <tag>Eureka</tag>
      
      <tag>Zookeeper</tag>
      
      <tag>Ribbon</tag>
      
      <tag>OpenFeign</tag>
      
      <tag>Hystrix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础重点</title>
    <link href="/2020/10/25/java%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9/"/>
    <url>/2020/10/25/java%E5%9F%BA%E7%A1%80%E9%87%8D%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/10/12/wuIjSMkOztdnYig.png" alt="image-20201012033912767"></p><p><img src="https://i.loli.net/2020/10/22/pMlALybNo6K8BhF.png" alt="image-20201022202519426"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用快捷键（自用）</title>
    <link href="/2020/10/25/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/"/>
    <url>/2020/10/25/%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%88%E8%87%AA%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>##常用快捷键（自用）</p><p><img src="https://i.loli.net/2020/10/07/Hu637oZ5XTEpPgF.png" alt="image-20201007120126557"></p><p><img src="https://i.loli.net/2020/10/26/omrpEdxv4bXu5kR.png" alt="image-20201007133815891"></p><pre><code class="hljs dockerfile"><span class="hljs-keyword">Cmd</span><span class="bash"> + w    关闭当前页面（一般是 Tab，注意不是退出 App）</span><span class="hljs-keyword">Cmd</span><span class="bash"> + q    退出当前 App</span><span class="hljs-keyword">Cmd</span><span class="bash"> + ,    打开设置面板。适用于绝大部分 App</span><span class="hljs-keyword">Cmd</span><span class="bash"> + h    隐藏（App）</span><span class="hljs-keyword">Cmd</span><span class="bash"> + o            打开文件</span><span class="hljs-keyword">Cmd</span><span class="bash"> + s            保存文件</span><span class="hljs-keyword">Cmd</span><span class="bash"> + Shift + s    文件另存为</span>ALT + `      应用内不同窗口选择ALT + Tab    同应用内窗口切换</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(转)从零开始学习 Alfred：基础功能及设置</title>
    <link href="/2020/10/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0-Alfred%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%8F%8A%E8%AE%BE%E7%BD%AE/"/>
    <url>/2020/10/25/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0-Alfred%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%8A%9F%E8%83%BD%E5%8F%8A%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://sspai.com/">少数派</a></p><p><a href="javascript:"></a> __</p><p><a href="javascript:">登录</a></p><ul><li><a href="https://sspai.com/mall">正版软件</a></li><li><a href="https://sspai.com/series">付费栏目</a></li><li><a href="https://sspai.com/matrix">Matrix</a></li><li><a href="https://sspai.com/topics">专题广场</a></li><li><a href="https://sspai.com/tag/%E7%83%AD%E9%97%A8%E6%96%87%E7%AB%A0#home">热门资讯</a></li><li><a href="https://sspai.com/tag/%E8%A7%86%E9%A2%91#home">视频</a></li><li><a href="https://sspai.com/tag/%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F#home">生活方式</a></li><li><a href="https://sspai.com/tag/%E6%96%B0%E7%8E%A9%E6%84%8F#home">新玩意</a></li></ul><p>__</p><p><img src="https://cdn.sspai.com/attachment/origin/2016/02/22/312270.png?imageMogr2/quality/95/thumbnail/!1440x480r/gravity/Center/crop/1440x480" alt="从零开始学习Alfred：基础功能及设置"></p><h1 id="从零开始学习-Alfred：基础功能及设置"><a href="#从零开始学习-Alfred：基础功能及设置" class="headerlink" title="从零开始学习 Alfred：基础功能及设置"></a>从零开始学习 Alfred：基础功能及设置</h1><p>2016年02月22日</p><p><a href="https://sspai.com/user/718367/updates"><img src="https://cdn.sspai.com/attachment/origin/2016/02/22/312272.png?imageMogr2/quality/95/thumbnail/!60x60r/gravity/Center/crop/60x60"></a></p><h4 id="wellsnake"><a href="#wellsnake" class="headerlink" title="wellsnake"></a><a href="/user/718367/updates">wellsnake</a></h4><h3 id="编注"><a href="#编注" class="headerlink" title="编注"></a><em>编注</em></h3><p>Alfred 是 Mac 上一款著名的效率应用，强大的功能和众多的扩展能让你在实际操作中大幅提升工作效率，少数派此前曾有多篇<a href="http://www.sspai.com/tag/alfred">关于的 Alfred<br>的评测和技巧</a>的文章。</p><p>不少读者虽然青睐 Alfred 的高效操作，但是也因为它看起来过于复杂而不敢尝试，为了让更多对 Alfred<br>感兴趣的人能够真正体验到它带来的高效，这次我们将对 Alfred 内的各个功能进行详细的讲解，让你可以从零开始了解和学习这款应用。</p><p>本文于 2014<br>年首发在作者个人博客，经<a href="/user/717277">修电脑的哲学家</a>二次排版及部分内容完善，少数派已获得原作者授权转载，<a href="http://wellsnake.com/jekyll/update/2014/06/15/001/">点此阅读原文</a>。</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记得以前在 Windows 平台有一个叫 Everything 的软件，主要特色就是输入关键字后能够快速得定位出你想要的文件。今天我们要介绍的 Alfred<br>也有和它有一样的功能。当然，如果只是简单的搜搜文件那也就称不上「神软」了。</p><p>Alfred<br>是一个用键盘通过热键、关键字、自定义插件来加快操作效率的工具，它不但是搜索工具，还是快速启动工具，甚至能够操作许多系统功能，扩充性极强，如果有兴趣应该还可以写一个煮咖啡的插件出来。简单点说就是使用了<br>Alfred 后你就可以丢掉鼠标了！</p><p>关于 Alfred 的介绍将分为上、下两篇：</p><ul><li>上篇介绍 Alfred 免费版和 PowerPack 版（ <strong>需要付费购买</strong> ）的部分功能；</li><li>下篇着重介绍 Alfred PowerPack 的 Workflows 扩展功能，其实这才是 Alfred 可以称为神软的功能。</li></ul><p>当然其实免费版本已经大大为我们提高了效率，不是重度用户使用免费版本也已经够用了。</p><p>下图就是 Alfred 的主界面。我们所有的操作都在这一个界面上进行。通过热键打开主界面，输入「 a 」之后 Alfred<br>就会为我在候选界面上显示操作系统中所有与 a 相关的文件及操作。</p><p>如果我们继续输入后续的内容，下拉选框内会动态显示候选操作。如果第一行正好是你想要的操作那么直接回车即可，同样我们也可以通过提示的热键来选择后面的操作。</p><p>我个人设置的 Alfred 的呼出快捷键为双击<code>Command</code>键。这样设置不仅呼出速度非常快，而且可以避开和其它应用的呼出快捷键冲突，例如<br><a href="../32457">Manico</a>。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311872.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311872.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)  </p><p>接下来通过 Alfred 的 Preferences（偏好设置）面板来深入了解这款应用到底有哪些神奇的功能。</p><h2 id="General（通用）"><a href="#General（通用）" class="headerlink" title="General（通用）"></a>General（通用）</h2><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311874.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311874.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)General 的选项很简单，只有下面三项：  </p><ul><li><strong>Startup：</strong> 设置系统启动时是否自启动。</li><li><strong>Alfred Hotkey：</strong> 设置呼出 Alfred 的热键。</li><li><strong>Where are you：</strong> 这个设置比较特别，因为 Alfred 内置了常用网站搜索功能，在这里设置了你所在的国家后，Alfred 在搜索时会打开搜索网站对应国家的网站。</li></ul><h2 id="Features（特性）"><a href="#Features（特性）" class="headerlink" title="Features（特性）"></a>Features（特性）</h2><p>这里是免费版的重点，Alfred 里所有的搜索功能都在这里设置。接下来我们一一介绍：</p><h3 id="Default-Results（默认结果）"><a href="#Default-Results（默认结果）" class="headerlink" title="Default Results（默认结果）"></a>Default Results（默认结果）</h3><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311875.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311875.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Essentials：</strong> 可以设置搜索「应用程序」、「联系人」、「设置」、「Safari 书签」、其它的还能查询「文件夹」、「文本文件」、「压缩文件」、「图片」、「AppleScript」等其它文件。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311876.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311876.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Search all file types：</strong> 搜索所有文件类型，不过 Alfred 建议我们可以通过 <code>Open + 关键字</code> 或者 <code>Space（空格键）</code> 来查询文件或者文件夹，因为如果全部选中的话不但影响查询速度，还容易混淆查询结果。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311878.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311878.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Search Scope：</strong> 设置 Alfred 查询时会搜索的文件夹，我们在这里可以自己添加和删除文件夹。</li><li><strong>Fallbacks：</strong> 是设置如果没有查到结果使用 Google 还是其它网站来搜索结果。默认反馈结果为 Google、Amazon、Wikipedia 网页搜索。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311879.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311879.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>注：</p><ul><li><strong>检索外置移动硬盘数据</strong> ：如果需要 Alfred 也所能搜索外置移动硬盘中的文件、应用程序和元数据的话，请添加外置移动硬盘的目录或拖动文件夹到 <strong>Search Scope</strong> 中；</li><li><strong>排除 Library 文件夹</strong> ：为了保证搜索结果的准确性和相关性，建议排除应用程序文件存放位置 <code>~Library</code>；</li><li><strong>检索 Chrome 书签</strong> ：Alfred 检索的书签是 Safari 中的数据，因此，如果你的主力浏览器是 Chrome 的话，则需要打开 Safari 后，通过文件→ 导入自→ 谷歌 Chrome 导入书签数据。</li></ul><h3 id="File-Search（文件搜索）"><a href="#File-Search（文件搜索）" class="headerlink" title="File Search（文件搜索）"></a>File Search（文件搜索）</h3><h4 id="1-Search（搜索）-选项"><a href="#1-Search（搜索）-选项" class="headerlink" title="1. Search（搜索） 选项"></a>1. Search（搜索） 选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311880.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311880.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Quick Search：</strong> 快速搜索，勾选该选项后，我们可以使用<code>‘（单引号）</code>或者<code>Space（空格键）</code>快速启用打开文件或者文件夹，功能类似于使用<code>Open + 关键字</code>。</li><li><strong>Opening Files：</strong> 输入<code>open</code>打开文件或者文件夹。</li><li><strong>Revealing Files：</strong> 输入<code>find</code>查询文件或者文件夹的位置。</li><li><strong>Inside Files：</strong> 输入<code>in</code>查找文本文件内含有查询文字的文件（这个功能很强大啊）。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311881.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311881.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>File Tags：</strong> 输入<code>tags</code>查询含有查询 tags（标签） 的文件或者文件夹。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311882.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311882.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Don‘t Show：</strong> 选择查询结果中不出现「邮件」、「书签」、「音乐」、「联系人」、「历史记录」等其它文件内容（注：如果需要更为复杂的结果过滤，则需要使用自定义结果过滤的 WorkFlow ）。</li><li><strong>Result Limit：</strong> 自定义显示结果个数——更多的结果意味着更大的灵活性（flexibility），而更少的结果以为这更高的性能（performance）。</li></ul><h4 id="2-Navigation（导航）选项"><a href="#2-Navigation（导航）选项" class="headerlink" title="2. Navigation（导航）选项"></a>2. Navigation（导航）选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311883.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311883.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>在这里，我们可以设置文件导航工具。我们可以使用<code>/</code>来直接定位到根目录，或者使用<code>~</code>来直接定位到当前用户的 home<br>目录。在文件定位工具中我们可以设置是否使用左右键来作为前进或者后退的功能键。在新版本的 Alfred 中，还增加了 Fuzzy<br>Matching（模糊匹配）的设置项。</p><p>默认情况下，在 Alfred 中，<code>→</code> 为「显示动作面板」，<code>Command + ↓</code>为前往下一层文件夹，<code>Command + ↑</code>为前往上一层文件夹。</p><ul><li><strong>Shortcuts：</strong> 我们可以设置使用 <code>←</code>和 <code>→</code> 为文件夹导航的快捷键，设置<code>return（回车键）</code>为在 Finder 中打开选中文件夹的快捷键。</li><li><strong>Previous Path：</strong> 先前路径，在此可以设置热键（默认为<code>Option + Command + /</code>）或关键词，来快捷地访问最近一次在 Alfred 中使用文件导航访问的路径。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311884.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311884.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h4 id="3-Buffer（缓存）选项"><a href="#3-Buffer（缓存）选项" class="headerlink" title="3. Buffer（缓存）选项"></a>3. Buffer（缓存）选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311885.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311885.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这也是 Alfred<br>的神奇功能之一，我们可以将查找到的文件或者文件夹加入到缓存中，然后就可以对搜索到的结果作批量处理了。这里的设置也很简单，主要就是是否启用缓存功能和缓存功能的几个快捷键，并且可以设置使用完后是否清空缓存等。</p><ul><li>通过<code>Option + ↑</code> 来将选中的文件夹或者文件加入到缓存，我们可以看到如果存在缓存的话 Alfred 搜索界面上会出现选中文件的小图标。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311886.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311886.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li>通过<code>Option + →</code>来批量处理缓存中的文件夹和文件。我们可以打开、发邮件、拷贝、移动、删除（嗯对了你是不是感觉到这个功能就是代替鼠标选中文件然后右键的功能）。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311887.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311887.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li>使用<code>Option + ↓</code>可以添加一个文件到缓存并移动到下一选择项。</li><li>使用<code>Option + ←</code>可以移除已添加的缓存项中的最后一项。</li></ul><h4 id="4-Action（动作）选项"><a href="#4-Action（动作）选项" class="headerlink" title="4. Action（动作）选项"></a>4. Action（动作）选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311888.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311888.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这个选项设置的功能基本和上面差不多，主要功能是在查询到文件夹或者文件后选择快捷键来显示操作界面。</p><p>另外，我们还可以在 Finder 中选中文件夹或者文件后使用快捷键来快速打开相同的操作界面。如果只是文件夹被选中的话我们可以有更多的操作可以做，比如：在<br>Finder 中打开文件夹、查询相似的文件、在控制台内打开文件夹、将目录拷贝粘贴板等。</p><ul><li><strong>Show Actions：</strong> 可以设置调出动作的快捷键，默认设置为 <code>n</code> 和<code>Control</code>；如果勾选 <strong>Action Ordering</strong> ，Alfred 则会根据你对动作的使用频次排列动作列表；</li><li><strong>Default Action：</strong> 可以根据个人偏好，勾选动作；</li><li><strong>File Selection：</strong> 可以设置热键（默认为 <code>Option + Command + /</code>），显示针对「当前已选文件」的「动作」面板。 </li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311889.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311889.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h5 id="5-Advanced（高级）选项"><a href="#5-Advanced（高级）选项" class="headerlink" title="5. Advanced（高级）选项"></a>5. Advanced（高级）选项</h5><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311890.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311890.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Copy Path：</strong> 复制路径，选中该选项后,如果使用了将目录拷贝至粘贴板的功能后会在目录前后加上单引号。</li><li><strong>Quick Look：</strong> 快速查看，选中该选项后，选中查询结果然后使用<code>Shift</code>或者是 <code>Command + Y</code>，可以使用系统的快速预览功能。</li><li><strong>AppleScript：</strong> AppleScript 脚本，选中该选项后可以使用<code>Command+O</code>来打开 AppleScript 编辑器，而 Alfred 默认的操作是直接执行脚本。</li><li><strong>Performance：</strong> 在搜索外部存储文件时使用文件类型图标？（这个没有试过不知道是不是这个功能）。</li><li><strong>Sorting：</strong> 这个设置应该是每次打开查询结果的文件后，更新文件的 「<code>kMDItemFSContentChangeDate</code>」 的值（具体作用不明，待 Google 之）。</li><li><strong>Home Folder：</strong> 设置表示 home 文件夹字符，默认为 <code>~</code>。 </li></ul><h3 id="Web-Search（网页搜索）"><a href="#Web-Search（网页搜索）" class="headerlink" title="Web Search（网页搜索）"></a>Web Search（网页搜索）</h3><p>这里当然是网站搜索的一些设置，我们可以使用 Alfred<br>默认的一些搜索功能，或者自己设置一些自定义搜索。图中可以看到已经设置了「亚马逊中国」、「亚马逊日本」、「Google」、「百度」、「BiliBili」、「Youku」等其它自定义查询。点击<br><strong>Add Custom Search</strong> 后我们就可以自定义查询了。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311892.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311892.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>在设置自定义查询界面中，主要设置有：</p><ul><li><strong>Search URL：</strong> 网站查询的 URL，每个网站的查询 URL 可以先通过网站查询功能，然后查看浏览器的地址栏就能知道了。当然查询内容使用 <code>&#123;query&#125;</code> 变量来代替。</li><li><strong>Title：</strong> 标题，这个是设置在查询时 Alfred 查询主界面显示的提示文字。</li><li><strong>Keyword：</strong> 查询关键字，尽量使用简短容易辨识的文字。</li><li><strong>Validation：</strong> 有效性，这个是用来测试设置是否有效的。</li></ul><p>另外每个查询设置都能设置相应网站的图标，只要将网站图标拖到设置的位置即可。在新版本的 Alfred 中，还增加了 <strong>Use HTTPS for<br>default searches if possible</strong> 选项，以强化安全性。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311893.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311893.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h3 id="Calculator（计算器）"><a href="#Calculator（计算器）" class="headerlink" title="Calculator（计算器）"></a>Calculator（计算器）</h3><p>计算器这个就不多说了，主要有两个功能，一个就是直接输入简单的加减运算，一个就是输入 <code>=</code> 来输入复杂的计算，支持许多高级的数学函数。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/22/312227.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/22/312227.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/22/312228.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/22/312228.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><p>字典功能其实使用的是 Mac 系统自带的字典，可以设置使用的字典和查询关键字，输入 di+关键字来查询中英字典</p><p>###<br>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311896.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311896.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)Contacts（联系人）</p><h4 id="1-Contacts-选项"><a href="#1-Contacts-选项" class="headerlink" title="1. Contacts 选项"></a>1. Contacts 选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311897.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311897.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这里我们可以设置查询到联系人后使用哪些操作，图中已经增加了点击名字拷贝到粘贴板和点击邮件地址直接发送邮件（系统默认操作），另外 Alfred 还支持<br><a href="../31500">URL Scheme</a> 来打开任意 App 。</p><ul><li>查询联系人</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311898.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311898.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li>联系人详细界面可以选择邮箱地址直接发送邮件</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311899.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311899.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h4 id="2-Email-选项"><a href="#2-Email-选项" class="headerlink" title="2. Email 选项"></a>2. Email 选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311901.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311901.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这里是发送邮件的选项。可以设置发送邮件的关键字，也可以设置打开 Gmail 网页来代替系统的邮件 app<br>来发送邮件。另外还可以设置如果有单个附件和多个附件的情况下邮件主题栏显示的文字（此功能主要是和前面文件搜索后发送邮件的功能有关）。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311902.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311902.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h4 id="3-Advanced（高级）-选项"><a href="#3-Advanced（高级）-选项" class="headerlink" title="3. Advanced（高级） 选项"></a>3. Advanced（高级） 选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311903.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311903.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这里可以设置联系人搜索结果的展示，比如：姓和名显示顺序对调、显示职位、显示工作、如果有地图信息还能打开地图。</p><p>中文用户建议大家勾选 <strong>Show last name before first name</strong> 选项，这样 Alfred 就能够以中文先姓后名规则显示。</p><h3 id="Clipboard（剪贴板）"><a href="#Clipboard（剪贴板）" class="headerlink" title="Clipboard（剪贴板）"></a>Clipboard（剪贴板）</h3><h4 id="1-History（历史）选项"><a href="#1-History（历史）选项" class="headerlink" title="1. History（历史）选项"></a>1. History（历史）选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311905.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311905.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>基于隐私的考虑，Alfred 是默认关闭「剪切板历史」功能的，我个人设置的查看「剪切板历史」的热键是<code>双击 Control</code>，方便调出；对于普通用户来说，Alfred 的剪贴板功能已经完全够用了，无需重复购买 Paste 等剪贴板管理工具。</p><p>这里是查看粘贴板历史记录的选项：</p><ul><li><strong>Clipboard Histroy：</strong> 剪切板历史，用于设置粘贴板历史保存的时间（默认为 24 小时）。</li><li><strong>Viewer Hotkey：</strong> 查看热键，用于设置打开粘贴板查看器的热键。</li><li><strong>Viewer Keyword：</strong> 查看关键词，用于设置打开粘贴板查看器的关键字。</li><li><strong>Snippet Keyword：</strong> 片段关键词，用于设置片段查询的关键字。</li><li><strong>Clear Keyword：</strong> 清空关键词，用于设置清空粘贴板历史的关键字。</li><li><strong>Ignore Apps：</strong> 忽略应用程序，用于设置忽略记录至粘贴板历史的应用程序。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311906.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311906.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h4 id="2-Snippets（片段）选项"><a href="#2-Snippets（片段）选项" class="headerlink" title="2. Snippets（片段）选项"></a>2. Snippets（片段）选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311908.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311908.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>此功能主要是用于设置文本片段，便于快速输入。例如，实现快速输入地址、常用问候语、常用代码片段等：</p><ul><li><strong>Name：</strong> 文本片段名称</li><li><strong>Keyword：</strong> 文本片段关键字</li><li><strong>Snippet：</strong> 文本片段内容</li></ul><p>使用时可以通过打开粘贴板浏览器根据名称和关键字查询，或者直接使用前面设置的片段查询关键字来查询。</p><ul><li>使用 snip 关键字查询文本片段</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311909.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311909.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li>查询到结果后直接回车便能将片段内容输入到当前激活的应用程序内</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311911.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311911.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h4 id="3-Merging-选项"><a href="#3-Merging-选项" class="headerlink" title="3. Merging 选项"></a>3. Merging 选项</h4><p>这是一个神奇的功能：当我们复制了一段文本后，再选中另外一段文本后，通过使用 <code>Command ＋ 双击 C 键</code><br>可以将当前选中的文本追加到第一次复制的文本后面。并且可以设置是使用空格、回车来分割不同的片段。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311912.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311912.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h4 id="4-Advanced（高级）选项"><a href="#4-Advanced（高级）选项" class="headerlink" title="4. Advanced（高级）选项"></a>4. Advanced（高级）选项</h4><p>这里主要设置自动粘贴当前选中的记录和设置复制文本内容的最大字节。</p><h3 id="2-8-iTunes"><a href="#2-8-iTunes" class="headerlink" title="2.8 iTunes"></a>2.8 iTunes</h3><h4 id="1-General（通用）选项"><a href="#1-General（通用）选项" class="headerlink" title="1. General（通用）选项"></a>1. General（通用）选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311913.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311913.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这个功能就类似一个 iTunes 的迷你播放器：</p><ul><li><strong>Mini Player：</strong> 用来设置打开迷你播放器的热键和关键字，默认为<code>Control + Command + Return</code>和 <code>itunes</code>。</li><li><strong>Playback：</strong> 如果使用随机选择专辑命令，Alfred 只会选择歌曲数目大于5的专辑。</li><li><strong>Behaviour：</strong> 查询并选中歌曲后自动关闭迷你播放器界面。</li><li><strong>Searching：</strong> 查询歌曲后 Alfred 会自动在 iTunes 内添加播放列表。</li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311914.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311914.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h4 id="2-Keywords（关键字）选项"><a href="#2-Keywords（关键字）选项" class="headerlink" title="2. Keywords（关键字）选项"></a>2. Keywords（关键字）选项</h4><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311915.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311915.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这里主要用于设置 iTunes 播放命令的关键字。主要有：</p><ul><li><strong>Play/Pause（播放/暂停）：</strong><code>play/pause</code></li><li><strong>Next Track（下一曲）：</strong><code>next</code></li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311917.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311917.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Previous Track（上一曲）：</strong><code>previous</code></li><li><strong>Random Album（随机选择专辑）：</strong><code>random</code></li></ul><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311918.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311918.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><ul><li><strong>Max Volume（最大音量）：</strong><code>volmax</code></li><li><strong>Half Volume（一半音量）：</strong><code>volmid</code></li><li><strong>Mute iTunes（静音）：</strong><code>mute</code></li></ul><p>另外，选中了 <strong>Show these keywords in Alfred Default Results</strong><br>后不但可以在迷你播放器内使用这些命令还能在搜索界面内使用以上命令。</p><h4 id="3-Advanced（高级）选项"><a href="#3-Advanced（高级）选项" class="headerlink" title="3. Advanced（高级）选项"></a>3. Advanced（高级）选项</h4><p>这里主要设置 iTunes 的资料库目录，如果 Alfred 没有找到我们可以手动设置。另外 Alfred 还能查询不在 iTunes<br>资料库内的歌曲。我们还可以设置 Alfred 在 iTunes 内的播放列表的名称。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311919.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311919.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h3 id="1Password"><a href="#1Password" class="headerlink" title="1Password"></a>1Password</h3><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311920.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311920.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>如果你购买了 <a href="http://www.sspai.com/tag/1Password">1Password </a>这个 Mac<br>上的密码管理应用的话，我们就可以直接在 Alfred 内直接搜索密码库了。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311923.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311923.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>不过需要注意的是如果 Alfred 显示 <strong>Unable to find 1Password Data</strong> 的话我们需要打开 1Password 的<br><strong>启用与第三方应用整合</strong> 这个选项。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311922.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311922.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><h3 id="System（系统）"><a href="#System（系统）" class="headerlink" title="System（系统）"></a>System（系统）</h3><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311924.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311924.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>这里主要是设置一些系统命令的关键字。建议将一些常用的系统命令、程序管理命令、盘符管理命令设置为剪短好记的语词。例如，我将「清空回收站」的关键字设置为<code>em</code>，将「推出所有盘符」的关键字设置为<code>tui</code>。</p><ul><li><strong>常规系统命令：</strong> 屏幕保护程序（<code>screen saver</code>）、显示回收站（<code>trash</code>）、清空回收站（<code>empty trash</code>）、登出（<code>logout</code>）、睡眠（<code>sleep</code>）、锁定（<code>lock</code>）、重启（<code>restart</code>）、关机（<code>shutdown</code>）。</li><li><strong>程序管理命令：</strong> 隐藏（<code>hide</code>）、关闭（<code>quit</code>）、强制关闭（<code>forcequit</code>）、关闭所有应用程序（<code>quitall</code>）。</li><li><strong>盘符管理命令：</strong> 推出某个盘符（<code>eject</code>）、推出所有盘符（<code>ejectall</code>）、设置盘符黑名单。</li></ul><h3 id="Terminal-Shell（终端和-Shell-）"><a href="#Terminal-Shell（终端和-Shell-）" class="headerlink" title="Terminal/Shell（终端和 Shell ）"></a>Terminal/Shell（终端和 Shell ）</h3><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311925.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311925.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>Alfred 还能输入控制台命令。这里设置比较简单了，设置输入命令的关键字和使用的默认控制台程序。</p><p>![](<a href="https://cdn.sspai.com/attachment/origin/2016/02/19/311926.png?imageView2/2/w/1120/q/90/interlace/1/ignore-">https://cdn.sspai.com/attachment/origin/2016/02/19/311926.png?imageView2/2/w/1120/q/90/interlace/1/ignore-</a><br>error/1)</p><p>好了，终于把上篇 Alfred<br>的基本功能全都说个了遍，基本上没有啥遗漏的功能了。如果能掌握上面所有的功能的话已经能够减少大部分的鼠标操作和重复性操作，将大大提高操作系统使用效率。</p><hr><p><strong>关联阅读：</strong></p><ul><li><a href="../32680">《5 款提高文件处理效率的 Alfred 扩展》</a></li><li><a href="../32281">《4 款「本地化」的 Alfred 扩展分享》</a></li><li><a href="../27900">《OS X 效率启动器 Alfred 详解与使用技巧》</a></li><li><a href="../27854">《OS X 效率启动器 Alfred 的 5 个实用扩展推荐（一）》</a></li><li><a href="../27929">《OS X 效率启动器 Alfred 的 5 个实用扩展推荐（二）》</a></li><li><a href="../28137">《OS X 效率启动器 Alfred 的最佳伴侣：Alfred Remote for iOS 上手详解》</a></li></ul><p><a href="https://sspai.com/tag/%E5%90%AF%E5%8A%A8%E5%99%A8%E5%BA%94%E7%94%A8">启动器应用 </a><a href="https://sspai.com/tag/Alfred">Alfred</a><a href="https://sspai.com/tag/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7">效率工具 </a><a href="https://sspai.com/tag/%E6%95%99%E7%A8%8B">教程</a><a href="https://sspai.com/tag/%E6%8A%80%E5%B7%A7">技巧 </a><a href="https://sspai.com/tag/Mac">Mac</a></p><p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p><hr><p><a href="javascript:">__149</a></p><p><a href="javascript:">__</a>[</p><ul><li><a href="http://service.weibo.com/share/share.php?url=null&title=&pic=https://cdn.sspai.com/attachment/origin/2016/02/22/312270.png&appkey=3196502474#">__微博</a></li><li>__微信</li></ul><p>扫码分享</p><p>](javascript:)</p><p><a href="javascript:">__</a></p><hr><p><a href="https://sspai.com/user/718367"><img src="https://cdn.sspai.com/attachment/origin/2016/02/22/312272.png?imageMogr2/quality/95/thumbnail/!160x160r/gravity/Center/crop/160x160" alt="wellsnake"></a></p><p>####</p><h4 id="wellsnake-1"><a href="#wellsnake-1" class="headerlink" title="wellsnake"></a><a href="https://sspai.com/user/718367">wellsnake</a></h4><p><a href="javascript:;">关注</a></p><p>请 <a href="javascript:;">登录</a> 使用文章全部功能</p><p>举报 __</p><p><a href="mailto:contact@sspai.com">__</a>[__](<a href="https://www.zhihu.com/org/shao-shu-">https://www.zhihu.com/org/shao-shu-</a><br>pai-46/activities)<a href="http://weibo.com/sspaime">__</a>__</p><p>关注公众号 sspaime</p><p><a href="https://twitter.com/sspai_com">__</a><a href="https://sspai.com/feed">__</a></p><ul><li><a href="//sspai.com/page/support">支持我们</a></li><li><a href="//sspai.com/apply/writing">作者招募</a></li><li><a href="//sspai.com/post/37739">用户协议</a></li><li><a href="//sspai.com/post/37793">FAQ</a></li><li>Contact Us</li></ul><p>© 2013-2019 少数派 | <a href="http://www.beian.miit.gov.cn/">粤ICP备09128966号-4</a> | CC BY-NC<br>4.0</p><p>联系方式 __</p><p>确定</p><p>提示</p><p> __</p><p>确 定 绑 定</p>]]></content>
    
    
    
    <tags>
      
      <tag>Alfred</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 相关问题解决记录</title>
    <link href="/2020/10/25/docker-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/10/25/docker-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="虚拟机中CentOS桥接网路无法连接问题解决"><a href="#虚拟机中CentOS桥接网路无法连接问题解决" class="headerlink" title="虚拟机中CentOS桥接网路无法连接问题解决"></a>虚拟机中CentOS桥接网路无法连接问题解决</h2><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">xxx为网卡名称</span>vim /etc/sysconfig/network-scripts/ifcfg-xxx</code></pre><p>将文件中 onboot=no 修改为 yes，重启后，可以重新获取网址。</p><p><strong>一些命令</strong></p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">重启网络</span>systemctl restart network<span class="hljs-meta">#</span><span class="bash">查看 ip 地址命令</span>ip a</code></pre><h2 id="docker服务启动-重启-关闭命令"><a href="#docker服务启动-重启-关闭命令" class="headerlink" title="docker服务启动,重启,关闭命令"></a>docker服务启动,重启,关闭命令</h2><p><img src="https://i.loli.net/2020/10/05/Jwd6zIBZDlFKcgS.png" alt="image-20201005014420062"></p><h2 id="我的docker-阿里云镜像地址配置"><a href="#我的docker-阿里云镜像地址配置" class="headerlink" title="我的docker 阿里云镜像地址配置"></a>我的docker 阿里云镜像地址配置</h2><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;experimental&quot;</span>:<span class="hljs-literal">false</span>,  <span class="hljs-attr">&quot;debug&quot;</span>:<span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>:[<span class="hljs-string">&quot;https://d4zjrewv.mirror.aliyuncs.com&quot;</span>,<span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>]&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql 相关的重点知识</title>
    <link href="/2020/10/13/sql-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/10/13/sql-%E7%9B%B8%E5%85%B3%E7%9A%84%E9%87%8D%E7%82%B9%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p><strong>SQL:结构化查询语言</strong></p><p><strong>DDL：Data Definition Language</strong></p><p>DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由<strong>数据库管理</strong>员执行。</p><p><strong>DML：Data Manipulation Language</strong></p><p>DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</p><p><strong>DQL：Data Query Language</strong></p><p>DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。</p><p><strong>SQL语言关键字不区分大小写</strong></p><p>表的一行成为记录（record）</p><p>表的一列称为字段（column）</p><p>可以有多个主键，称为联合主键，但不建议使用</p><p>###分页查询</p><ul><li><code>LIMIT</code>总是设定为<code>pageSize</code>；</li><li><code>OFFSET</code>计算公式为<code>pageSize * (pageIndex - 1)</code>。</li></ul><p>部门前三工资的成员（经典思路）</p><p><img src="https://i.loli.net/2020/10/22/DoxUj83Pt7BWb4X.png" alt="image-20201022164717900"></p><p>#读偏差</p><blockquote><p>很明显，造成不可容忍的读偏差的原因是——只读操作持续的时间太长了，而这段时间又提交了新的写入。<strong>快照隔离</strong>是这个问题最常见的解决方案。</p></blockquote><p>#<strong>快照隔离</strong>（可重复读）</p><p><strong>快照隔离</strong>是一种比读已提交<strong>更强的隔离级别，</strong>它对长时间运行的只读查询（如备份和分析）非常有用。做法是，每个事务都从数据库的<strong>一致快照</strong>中读取——也就是说，<strong>事务始终可以看到事务开始时数据库中的所有数据</strong>。即使这些数据随后被其他事务更改，这个事务也只能看到该特定时间点的旧数据。</p><h3 id="不可重复读和幻读的区别"><a href="#不可重复读和幻读的区别" class="headerlink" title="不可重复读和幻读的区别"></a>不可重复读和幻读的区别</h3><p>很多人容易搞混不可重复读和幻读，确实这两者有些相似。但不可重复读重点在于update和delete，而幻读的重点在于insert。</p><p>如果使用锁机制来实现这两种隔离级别，在可重复读中，该sql第一次读取到数据后，就将这些数据加锁，其它事务无法修改这些数据，就可以实现可重复读了。但这种方法却无法锁住insert的数据，所以当事务A先前读取了数据，或者修改了全部数据，事务B还是可以insert数据提交，这时事务A就会发现莫名其妙多了一条之前没有的数据，这就是幻读，不能通过行锁来避免。需要Serializable隔离级别 ，读用读锁，写用写锁，读锁和写锁互斥，这么做可以有效的避免幻读、不可重复读、脏读等问题，但会极大的降低数据库的并发能力。</p><p>所以说不可重复读和幻读最大的区别，就在于如何通过锁机制来解决他们产生的问题。</p><p>上文说的，是使用悲观锁机制来处理这两种问题，但是MySQL、ORACLE、PostgreSQL等成熟的数据库，出于性能考虑，都是使用了以乐观锁为理论基础的MVCC（多版本并发控制）来避免这两种问题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot 笔记</title>
    <link href="/2020/10/05/Spring-Boot-%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/10/05/Spring-Boot-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a><strong>一、</strong>Spring Boot 入门</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p><p>微服务：架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa">详细参照微服务文档</a></p><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/">http://www.gulixueyuan.com/</a> 谷粒学院</p><p>环境约束</p><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p><p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p><p>统一环境；</p><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk-1.8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span></code></pre><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p><p><img src="https://i.loli.net/2020/10/26/F4ZpmUCfdLsTzuX.png" alt="idea设置"></p><p><img src="https://i.loli.net/2020/10/26/291AnHVyD63lF8W.png" alt="images/"></p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> *  <span class="hljs-doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// Spring应用启动起来</span>        SpringApplication.run(HelloWorldMainApplication.class,args);    &#125;&#125;</code></pre><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;    &#125;&#125;</code></pre><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>他的父项目是<span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>他来真正管理Spring Boot应用里面的所有依赖版本；</code></pre><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p><strong>spring-boot-starter</strong>-==web==：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> *  <span class="hljs-doctag">@SpringBootApplication</span> 来标注一个主程序类，说明这是一个Spring Boot应用</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorldMainApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// Spring应用启动起来</span>        SpringApplication.run(HelloWorldMainApplication.class,args);    &#125;&#125;</code></pre><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Inherited</span><span class="hljs-meta">@SpringBootConfiguration</span><span class="hljs-meta">@EnableAutoConfiguration</span><span class="hljs-meta">@ComponentScan(excludeFilters = &#123;</span><span class="hljs-meta">      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><span class="hljs-meta">      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123;</code></pre><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><span class="hljs-meta">@Import(EnableAutoConfigurationImportSelector.class)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;</code></pre><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p>==将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；==</p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件？</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="https://i.loli.net/2020/10/26/KAS96aUJZO2Nwrj.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p><p>==Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；==以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><p>​        </p><p>==Spring注解版（谷粒学院）==</p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><hr><h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><p>​    YAML  A Markup Language：是一个标记语言</p><p>​    YAML   isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>​    YAML：配置例子</p><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span></code></pre><p>​    XML：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>8081<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span></code></pre><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span>    <span class="hljs-attr">path:</span> <span class="hljs-string">/hello</span></code></pre><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><pre><code class="hljs yaml"><span class="hljs-attr">friends:</span><span class="hljs-attr">lastName:</span> <span class="hljs-string">zhangsan</span><span class="hljs-attr">age:</span> <span class="hljs-number">20</span></code></pre><p>行内写法：</p><pre><code class="hljs yaml"><span class="hljs-attr">friends:</span> &#123;<span class="hljs-attr">lastName:</span> <span class="hljs-string">zhangsan</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">18</span>&#125;</code></pre><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span> <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span> <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span></code></pre><p>行内写法</p><pre><code class="hljs yaml"><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]</code></pre><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><pre><code class="hljs yaml"><span class="hljs-attr">person:</span>    <span class="hljs-attr">lastName:</span> <span class="hljs-string">hello</span>    <span class="hljs-attr">age:</span> <span class="hljs-number">18</span>    <span class="hljs-attr">boss:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">birth:</span> <span class="hljs-number">2017</span><span class="hljs-string">/12/12</span>    <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-number">12</span>&#125;    <span class="hljs-attr">lists:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">lisi</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">zhaoliu</span>    <span class="hljs-attr">dog:</span>      <span class="hljs-attr">name:</span> <span class="hljs-string">小狗</span>      <span class="hljs-attr">age:</span> <span class="hljs-number">12</span></code></pre><p>javaBean：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span><span class="hljs-comment"> * <span class="hljs-doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span><span class="hljs-comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="hljs-doctag">@ConfigurationProperties</span>功能；</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-keyword">private</span> String lastName;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> Boolean boss;    <span class="hljs-keyword">private</span> Date birth;    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;    <span class="hljs-keyword">private</span> Dog dog;</code></pre><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p><p><img src="https://i.loli.net/2020/10/26/joBNDYV3LfEmtRC.png" alt="idea配置乱码"></p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><span class="hljs-meta">@Validated</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &lt;bean class=&quot;Person&quot;&gt;</span><span class="hljs-comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span><span class="hljs-comment">     * &lt;bean/&gt;</span><span class="hljs-comment">     */</span>   <span class="hljs-comment">//lastName必须是邮箱格式</span>    <span class="hljs-meta">@Email</span>    <span class="hljs-comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String lastName;    <span class="hljs-comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span>    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-comment">//@Value(&quot;true&quot;)</span>    <span class="hljs-keyword">private</span> Boolean boss;    <span class="hljs-keyword">private</span> Date birth;    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;    <span class="hljs-keyword">private</span> Dog dog;</code></pre><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 将配置文件中配置的每一个属性的值，映射到这个组件中</span><span class="hljs-comment"> * <span class="hljs-doctag">@ConfigurationProperties</span>：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span><span class="hljs-comment"> *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * 只有这个组件是容器中的组件，才能容器提供的<span class="hljs-doctag">@ConfigurationProperties</span>功能；</span><span class="hljs-comment"> *  <span class="hljs-doctag">@ConfigurationProperties</span>(prefix = &quot;person&quot;)默认从全局配置文件中获取值；</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-meta">@PropertySource(value = &#123;&quot;classpath:person.properties&quot;&#125;)</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><span class="hljs-comment">//@Validated</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &lt;bean class=&quot;Person&quot;&gt;</span><span class="hljs-comment">     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/$&#123;key&#125;从环境变量、配置文件中获取值/#&#123;SpEL&#125;&quot;&gt;&lt;/property&gt;</span><span class="hljs-comment">     * &lt;bean/&gt;</span><span class="hljs-comment">     */</span>   <span class="hljs-comment">//lastName必须是邮箱格式</span>   <span class="hljs-comment">// @Email</span>    <span class="hljs-comment">//@Value(&quot;$&#123;person.last-name&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String lastName;    <span class="hljs-comment">//@Value(&quot;#&#123;11*2&#125;&quot;)</span>    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-comment">//@Value(&quot;true&quot;)</span>    <span class="hljs-keyword">private</span> Boolean boss;</code></pre><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(locations = &#123;&quot;classpath:beans.xml&quot;&#125;)</span>导入Spring的配置文件让其生效</code></pre><p>不来编写Spring的配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.springboot.service.HelloService&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类**@Configuration**——&gt;Spring配置文件</p><p>2、使用**@Bean**给容器中添加组件</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAppConfig</span> </span>&#123;    <span class="hljs-comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloService <span class="hljs-title">helloService02</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;配置类@Bean给容器中添加组件了...&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HelloService();    &#125;&#125;</code></pre><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><pre><code class="hljs java">$&#123;random.value&#125;、$&#123;random.<span class="hljs-keyword">int</span>&#125;、$&#123;random.<span class="hljs-keyword">long</span>&#125;$&#123;random.<span class="hljs-keyword">int</span>(<span class="hljs-number">10</span>)&#125;、$&#123;random.<span class="hljs-keyword">int</span>[<span class="hljs-number">1024</span>,<span class="hljs-number">65536</span>]&#125;</code></pre><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre><code class="hljs properties"><span class="hljs-meta">person.last-name</span>=<span class="hljs-string">张三$&#123;random.uuid&#125;</span><span class="hljs-meta">person.age</span>=<span class="hljs-string">$&#123;random.int&#125;</span><span class="hljs-meta">person.birth</span>=<span class="hljs-string">2017/12/15</span><span class="hljs-meta">person.boss</span>=<span class="hljs-string">false</span><span class="hljs-meta">person.maps.k1</span>=<span class="hljs-string">v1</span><span class="hljs-meta">person.maps.k2</span>=<span class="hljs-string">14</span><span class="hljs-meta">person.lists</span>=<span class="hljs-string">a,b,c</span><span class="hljs-meta">person.dog.name</span>=<span class="hljs-string">$&#123;person.hello:hello&#125;_dog</span><span class="hljs-meta">person.dog.age</span>=<span class="hljs-string">15</span></code></pre><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <span class="hljs-comment">#指定属于哪个环境</span></code></pre><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p>==我们还可以通过spring.config.location来改变默认的配置文件位置==</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong>==SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置==</strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 ==@EnableAutoConfiguration==</p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li></ul><ul><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</p><ul><li><pre><code class="java">SpringFactoriesLoader.loadFactoryNames()扫描所有jar包类路径下  META-INF/spring.factories把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中<pre><code class="hljs http">    **==将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；==**```properties# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\<span class="hljs-attribute">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\</span><span class="hljs-attribute">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span></code></pre></code></pre></li></ul></li></ul><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>   <span class="hljs-comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span><span class="hljs-meta">@EnableConfigurationProperties(HttpEncodingProperties.class)</span>  <span class="hljs-comment">//启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</span><span class="hljs-meta">@ConditionalOnWebApplication</span> <span class="hljs-comment">//Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效</span><span class="hljs-meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span>  <span class="hljs-comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span>  <span class="hljs-comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的</span><span class="hljs-comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span> </span>&#123;    <span class="hljs-comment">//他已经和SpringBoot的配置文件映射了</span>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HttpEncodingProperties properties;     <span class="hljs-comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HttpEncodingAutoConfiguration</span><span class="hljs-params">(HttpEncodingProperties properties)</span> </span>&#123;<span class="hljs-keyword">this</span>.properties = properties;&#125;      <span class="hljs-meta">@Bean</span>   <span class="hljs-comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span><span class="hljs-meta">@ConditionalOnMissingBean(CharacterEncodingFilter.class)</span> <span class="hljs-comment">//判断容器没有这个组件？</span><span class="hljs-function"><span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title">characterEncodingFilter</span><span class="hljs-params">()</span> </span>&#123;CharacterEncodingFilter filter = <span class="hljs-keyword">new</span> OrderedCharacterEncodingFilter();filter.setEncoding(<span class="hljs-keyword">this</span>.properties.getCharset().name());filter.setForceRequestEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(Type.REQUEST));filter.setForceResponseEncoding(<span class="hljs-keyword">this</span>.properties.shouldForce(Type.RESPONSE));<span class="hljs-keyword">return</span> filter;&#125;</code></pre><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)</span>  <span class="hljs-comment">//从配置文件中获取指定的值和bean的属性进行绑定</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpEncodingProperties</span> </span>&#123;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);</code></pre><p><strong>精髓：</strong></p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p><p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p>**==我们可以通过启用  debug=true属性；来让控制台打印自动配置报告==**，这样我们就可以很方便的知道哪些自动配置类生效；</p><pre><code class="hljs java">=========================AUTO-CONFIGURATION REPORT=========================Positive matches:（自动配置类启用的）-----------------   DispatcherServletAutoConfiguration matched:      - <span class="hljs-meta">@ConditionalOnClass</span> found required <span class="hljs-class"><span class="hljs-keyword">class</span> &#x27;<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">DispatcherServlet</span>&#x27;</span>; <span class="hljs-meta">@ConditionalOnMissingClass</span> <span class="hljs-function">did not find unwanted <span class="hljs-title">class</span> <span class="hljs-params">(OnClassCondition)</span></span><span class="hljs-function">      - @<span class="hljs-title">ConditionalOnWebApplication</span> <span class="hljs-params">(required)</span> found <span class="hljs-title">StandardServletEnvironment</span> <span class="hljs-params">(OnWebApplicationCondition)</span></span><span class="hljs-function">        </span><span class="hljs-function">    </span><span class="hljs-function">Negative matches:（没有启动，没有匹配成功的自动配置类）</span><span class="hljs-function">-----------------</span><span class="hljs-function"></span><span class="hljs-function">   ActiveMQAutoConfiguration:</span><span class="hljs-function">      Did not match:</span><span class="hljs-function">         - @ConditionalOnClass did not find required classes &#x27;javax.jms.ConnectionFactory&#x27;, &#x27;org.apache.activemq.ActiveMQConnectionFactory&#x27; <span class="hljs-params">(OnClassCondition)</span></span><span class="hljs-function"></span><span class="hljs-function">   AopAutoConfiguration:</span><span class="hljs-function">      Did not match:</span><span class="hljs-function">         - @ConditionalOnClass did not find required classes &#x27;org.aspectj.lang.annotation.Aspect&#x27;, &#x27;org.aspectj.lang.reflect.Advice&#x27; <span class="hljs-params">(OnClassCondition)</span></span><span class="hljs-function">        </span></code></pre><h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p><p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p><p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p><p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p><p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p><p>​        5、JDBC—数据库驱动；</p><p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p>​    <strong>==SpringBoot选用 SLF4j和logback；==</strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org/">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    Logger logger = LoggerFactory.getLogger(HelloWorld.class);    logger.info(<span class="hljs-string">&quot;Hello World&quot;</span>);  &#125;&#125;</code></pre><p>图示；</p><p><img src="https://i.loli.net/2020/10/26/NSRns4PewWoDcyz.png" alt="images/concrete-bindings.png"></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><img src="https://i.loli.net/2020/10/26/5dEpQ7qBLZHf1ma.png" style="zoom:200%;" /><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p>==1、将系统中其他日志框架先排除出去；==</p><p>==2、用中间包来替换原有的日志框架；==</p><p>==3、我们导入slf4j其他的实现==</p><h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>SpringBoot使用它来做日志功能；</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>底层依赖关系</p><p><img src="https://i.loli.net/2020/10/26/9xpdFJghEKZClea.png"></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包？</p><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFactory</span> </span>&#123;    <span class="hljs-keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="hljs-string">&quot;http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j&quot;</span>;    <span class="hljs-keyword">static</span> LogFactory logFactory = <span class="hljs-keyword">new</span> SLF4JLogFactory();</code></pre><p><img src="https://i.loli.net/2020/10/26/3hJwfcCHaR71kbq.png"></p><p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​            Spring框架用的是commons-logging；</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p><strong>==SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；==</strong></p><h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p><pre><code class="hljs java"><span class="hljs-comment">//记录器</span>Logger logger = LoggerFactory.getLogger(getClass());<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//System.out.println();</span><span class="hljs-comment">//日志的级别；</span><span class="hljs-comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span><span class="hljs-comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span>logger.trace(<span class="hljs-string">&quot;这是trace日志...&quot;</span>);logger.debug(<span class="hljs-string">&quot;这是debug日志...&quot;</span>);<span class="hljs-comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span>logger.info(<span class="hljs-string">&quot;这是info日志...&quot;</span>);logger.warn(<span class="hljs-string">&quot;这是warn日志...&quot;</span>);logger.error(<span class="hljs-string">&quot;这是error日志...&quot;</span>);&#125;</code></pre><pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p><pre><code class="hljs properties"><span class="hljs-meta">logging.level.com.atguigu</span>=<span class="hljs-string">trace</span><span class="hljs-comment">#logging.path=</span><span class="hljs-comment"># 不指定路径在当前项目下生成springboot.log日志</span><span class="hljs-comment"># 可以指定完整的路径；</span><span class="hljs-comment">#logging.file=G:/springboot.log</span><span class="hljs-comment"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件</span><span class="hljs-meta">logging.path</span>=<span class="hljs-string">/spring/log</span><span class="hljs-comment">#  在控制台输出的日志的格式</span><span class="hljs-meta">logging.pattern.console</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><span class="hljs-comment"># 指定文件中日志输出的格式</span><span class="hljs-meta">logging.pattern.file</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd&#125; === [%thread] === %-5level === %logger&#123;50&#125; ==== %msg%n</span></code></pre><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;staging&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span>  可以指定某段配置只在某个环境下生效<span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span></code></pre><p>如：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stdout&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        日志输出格式：</span><span class="hljs-comment">%d表示日期时间，</span><span class="hljs-comment">%thread表示线程名，</span><span class="hljs-comment">%-5level：级别从左显示5个字符宽度</span><span class="hljs-comment">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span><span class="hljs-comment">%msg：日志消息，</span><span class="hljs-comment">%n是换行符</span><span class="hljs-comment">        --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;!dev&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>切换为log4j2</p><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><hr><h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发"></a>四、Web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot；</p><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><pre><code class="hljs avrasm">xxxxAutoConfiguration：帮我们给容器中自动配置组件；<span class="hljs-symbol">xxxxProperties:</span>配置类来封装配置文件的内容；</code></pre><h2 id="2、SpringBoot对静态资源的映射规则；"><a href="#2、SpringBoot对静态资源的映射规则；" class="headerlink" title="2、SpringBoot对静态资源的映射规则；"></a>2、SpringBoot对静态资源的映射规则；</h2><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceProperties</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ResourceLoaderAware</span> </span>&#123;  <span class="hljs-comment">//可以设置和静态资源有关的参数，缓存时间等</span></code></pre><pre><code class="hljs java">WebMvcAuotConfiguration：<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.resourceProperties.isAddMappings()) &#123;logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<span class="hljs-keyword">return</span>;&#125;Integer cachePeriod = <span class="hljs-keyword">this</span>.resourceProperties.getCachePeriod();<span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(<span class="hljs-string">&quot;/webjars/**&quot;</span>)) &#123;customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="hljs-string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>).setCachePeriod(cachePeriod));&#125;String staticPathPattern = <span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern();         <span class="hljs-comment">//静态资源文件夹映射</span><span class="hljs-keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern).addResourceLocations(<span class="hljs-keyword">this</span>.resourceProperties.getStaticLocations()).setCachePeriod(cachePeriod));&#125;&#125;       <span class="hljs-comment">//配置欢迎页映射</span><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title">welcomePageHandlerMapping</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">ResourceProperties resourceProperties)</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),<span class="hljs-keyword">this</span>.mvcProperties.getStaticPathPattern());&#125;      <span class="hljs-comment">//配置喜欢的图标</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaviconConfiguration</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResourceProperties resourceProperties;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FaviconConfiguration</span><span class="hljs-params">(ResourceProperties resourceProperties)</span> </span>&#123;<span class="hljs-keyword">this</span>.resourceProperties = resourceProperties;&#125;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> SimpleUrlHandlerMapping <span class="hljs-title">faviconHandlerMapping</span><span class="hljs-params">()</span> </span>&#123;SimpleUrlHandlerMapping mapping = <span class="hljs-keyword">new</span> SimpleUrlHandlerMapping();mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="hljs-number">1</span>);             <span class="hljs-comment">//所有  **/favicon.ico </span>mapping.setUrlMap(Collections.singletonMap(<span class="hljs-string">&quot;**/favicon.ico&quot;</span>,faviconRequestHandler()));<span class="hljs-keyword">return</span> mapping;&#125;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> ResourceHttpRequestHandler <span class="hljs-title">faviconRequestHandler</span><span class="hljs-params">()</span> </span>&#123;ResourceHttpRequestHandler requestHandler = <span class="hljs-keyword">new</span> ResourceHttpRequestHandler();requestHandler.setLocations(<span class="hljs-keyword">this</span>.resourceProperties.getFaviconLocations());<span class="hljs-keyword">return</span> requestHandler;&#125;&#125;</code></pre><p>==1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；==</p><p>​    webjars：以jar包的方式引入静态资源；</p><p><a href="http://www.webjars.org/">http://www.webjars.org/</a></p><p><img src="https://i.loli.net/2020/10/26/hkePTMcVySo9HOJ.png"></p><p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jquery-webjar--&gt;</span>在访问的时候只需要写webjars下面资源的名称即可<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>==2）、”/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射==</p><pre><code class="hljs 1c"><span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/resources/&quot;</span>,<span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> <span class="hljs-string">&quot;/&quot;</span>：当前项目的根路径</code></pre><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p>==3）、欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；==</p><p>​    localhost:8080/   找index页面</p><p>==4）、所有的 **/favicon.ico  都是在静态资源文件下找；==</p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="https://i.loli.net/2020/10/26/bY2PjdsEoU7TOiN.png"></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>          2.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>切换thymeleaf版本<span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">thymeleaf.version</span>&gt;</span>3.0.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">thymeleaf.version</span>&gt;</span><span class="hljs-comment">&lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;</span><span class="hljs-comment">&lt;!-- thymeleaf2   layout1--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">thymeleaf-layout-dialect.version</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThymeleafProperties</span> </span>&#123;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Charset DEFAULT_ENCODING = Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(<span class="hljs-string">&quot;text/html&quot;</span>);<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_PREFIX = <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DEFAULT_SUFFIX = <span class="hljs-string">&quot;.html&quot;</span>;  <span class="hljs-comment">//</span></code></pre><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></code></pre><p>2、使用thymeleaf语法；</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>成功！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-comment">&lt;!--th:text 将div里面的文本内容设置为 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;hello&#125;&quot;</span>&gt;</span>这是显示欢迎信息<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="https://i.loli.net/2020/10/26/pOSYxd2jJAQc4Ht.png"></p><p>2）、表达式？</p><pre><code class="hljs properties"><span class="hljs-attr">Simple</span> <span class="hljs-string">expressions:（表达式语法）</span>    <span class="hljs-attr">Variable</span> <span class="hljs-string">Expressions: $&#123;...&#125;：获取变量值；OGNL；</span>    <span class="hljs-attr">1）、获取对象的属性、调用方法</span>    <span class="hljs-attr">2）、使用内置的基本对象：</span><span class="hljs-comment">    #ctx : the context object.</span><span class="hljs-comment">    #vars: the context variables.</span><span class="hljs-comment">                #locale : the context locale.</span><span class="hljs-comment">                #request : (only in Web Contexts) the HttpServletRequest object.</span><span class="hljs-comment">                #response : (only in Web Contexts) the HttpServletResponse object.</span><span class="hljs-comment">                #session : (only in Web Contexts) the HttpSession object.</span><span class="hljs-comment">                #servletContext : (only in Web Contexts) the ServletContext object.</span>                                <span class="hljs-attr">$&#123;session.foo&#125;</span>            <span class="hljs-attr">3）、内置的一些工具对象：</span><span class="hljs-comment">#execInfo : information about the template being processed.</span><span class="hljs-comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax.</span><span class="hljs-comment">#uris : methods for escaping parts of URLs/URIs</span><span class="hljs-comment">#conversions : methods for executing the configured conversion service (if any).</span><span class="hljs-comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span><span class="hljs-comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span><span class="hljs-comment">#numbers : methods for formatting numeric objects.</span><span class="hljs-comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span><span class="hljs-comment">#objects : methods for objects in general.</span><span class="hljs-comment">#bools : methods for boolean evaluation.</span><span class="hljs-comment">#arrays : methods for arrays.</span><span class="hljs-comment">#lists : methods for lists.</span><span class="hljs-comment">#sets : methods for sets.</span><span class="hljs-comment">#maps : methods for maps.</span><span class="hljs-comment">#aggregates : methods for creating aggregates on arrays or collections.</span><span class="hljs-comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span>    <span class="hljs-attr">Selection</span> <span class="hljs-string">Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；</span>    <span class="hljs-meta">补充：配合</span> <span class="hljs-string">th:object=&quot;$&#123;session.user&#125;：</span>   <span class="hljs-meta">&lt;div</span> <span class="hljs-string">th:object=&quot;$&#123;session.user&#125;&quot;&gt;</span>    <span class="hljs-meta">&lt;p&gt;Name</span>: <span class="hljs-string">&lt;span th:text=&quot;*&#123;firstName&#125;&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;</span>    <span class="hljs-meta">&lt;p&gt;Surname</span>: <span class="hljs-string">&lt;span th:text=&quot;*&#123;lastName&#125;&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;</span>    <span class="hljs-meta">&lt;p&gt;Nationality</span>: <span class="hljs-string">&lt;span th:text=&quot;*&#123;nationality&#125;&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;</span>    <span class="hljs-attr">&lt;/div&gt;</span>        <span class="hljs-attr">Message</span> <span class="hljs-string">Expressions: #&#123;...&#125;：获取国际化内容</span>    <span class="hljs-attr">Link</span> <span class="hljs-string">URL Expressions: @&#123;...&#125;：定义URL；</span>    <span class="hljs-meta">@&#123;/order/process(execId</span>=<span class="hljs-string">$&#123;execId&#125;,execType=&#x27;FAST&#x27;)&#125;</span>    <span class="hljs-attr">Fragment</span> <span class="hljs-string">Expressions: ~&#123;...&#125;：片段引用表达式</span>    <span class="hljs-meta">&lt;div</span> <span class="hljs-string">th:insert=&quot;~&#123;commons :: main&#125;&quot;&gt;...&lt;/div&gt;</span>    <span class="hljs-attr">Literals（字面量）</span>      <span class="hljs-attr">Text</span> <span class="hljs-string">literals: &#x27;one text&#x27; , &#x27;Another one!&#x27; ,…</span>      <span class="hljs-attr">Number</span> <span class="hljs-string">literals: 0 , 34 , 3.0 , 12.3 ,…</span>      <span class="hljs-attr">Boolean</span> <span class="hljs-string">literals: true , false</span>      <span class="hljs-attr">Null</span> <span class="hljs-string">literal: null</span>      <span class="hljs-attr">Literal</span> <span class="hljs-string">tokens: one , sometext , main ,…</span><span class="hljs-attr">Text</span> <span class="hljs-string">operations:（文本操作）</span>    <span class="hljs-attr">String</span> <span class="hljs-string">concatenation: +</span>    <span class="hljs-attr">Literal</span> <span class="hljs-string">substitutions: |The name is $&#123;name&#125;|</span><span class="hljs-attr">Arithmetic</span> <span class="hljs-string">operations:（数学运算）</span>    <span class="hljs-attr">Binary</span> <span class="hljs-string">operators: + , - , * , / , %</span>    <span class="hljs-attr">Minus</span> <span class="hljs-string">sign (unary operator): -</span><span class="hljs-attr">Boolean</span> <span class="hljs-string">operations:（布尔运算）</span>    <span class="hljs-attr">Binary</span> <span class="hljs-string">operators: and , or</span>    <span class="hljs-attr">Boolean</span> <span class="hljs-string">negation (unary operator): ! , not</span><span class="hljs-attr">Comparisons</span> <span class="hljs-string">and equality:（比较运算）</span>    <span class="hljs-attr">Comparators</span>: <span class="hljs-string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span>    <span class="hljs-attr">Equality</span> <span class="hljs-string">operators: == , != ( eq , ne )</span><span class="hljs-attr">Conditional</span> <span class="hljs-string">operators:条件运算（三元运算符）</span>    <span class="hljs-meta">If-then</span>: <span class="hljs-string">(if) ? (then)</span>    <span class="hljs-meta">If-then-else</span>: <span class="hljs-string">(if) ? (then) : (else)</span>    <span class="hljs-attr">Default</span>: <span class="hljs-string">(value) ?: (defaultvalue)</span><span class="hljs-attr">Special</span> <span class="hljs-string">tokens:</span>    <span class="hljs-meta">No-Operation</span>: <span class="hljs-string">_ </span></code></pre><h2 id="4、SpringMVC自动配置"><a href="#4、SpringMVC自动配置" class="headerlink" title="4、SpringMVC自动配置"></a>4、SpringMVC自动配置</h2><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li></ul><ul><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)</span><span class="hljs-comment">//在文件中配置日期格式化的规则</span><span class="hljs-function"><span class="hljs-keyword">public</span> Formatter&lt;Date&gt; <span class="hljs-title">dateFormatter</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DateFormatter(<span class="hljs-keyword">this</span>.mvcProperties.getDateFormat());<span class="hljs-comment">//日期格式化组件</span>&#125;</code></pre><p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p></li></ul></li></ul><ul><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><pre><code class="hljs diff">初始化WebDataBinder；请求数据<span class="hljs-comment">=====JavaBean；</span></code></pre></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;success&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/hello&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span></code></pre><p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;       <span class="hljs-comment">// super.addViewControllers(registry);</span>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span>        registry.addViewController(<span class="hljs-string">&quot;/atguigu&quot;</span>).setViewName(<span class="hljs-string">&quot;success&quot;</span>);    &#125;&#125;</code></pre><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><pre><code class="hljs java">   <span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnableWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> </span>&#123;     <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> WebMvcConfigurerComposite configurers = <span class="hljs-keyword">new</span> WebMvcConfigurerComposite(); <span class="hljs-comment">//从容器中获取所有的WebMvcConfigurer</span>     <span class="hljs-meta">@Autowired(required = false)</span>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setConfigurers</span><span class="hljs-params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;         <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;             <span class="hljs-keyword">this</span>.configurers.addWebMvcConfigurers(configurers);           <span class="hljs-comment">//一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；  </span>           <span class="hljs-meta">@Override</span>            <span class="hljs-comment">// public void addViewControllers(ViewControllerRegistry registry) &#123;</span>             <span class="hljs-comment">//    for (WebMvcConfigurer delegate : this.delegates) &#123;</span>              <span class="hljs-comment">//       delegate.addViewControllers(registry);</span>              <span class="hljs-comment">//   &#125;</span>             &#125;         &#125;&#125;</code></pre><p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="hljs-meta">@EnableWebMvc</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;       <span class="hljs-comment">// super.addViewControllers(registry);</span>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span>        registry.addViewController(<span class="hljs-string">&quot;/atguigu&quot;</span>).setViewName(<span class="hljs-string">&quot;success&quot;</span>);    &#125;&#125;</code></pre><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><pre><code class="hljs java"><span class="hljs-meta">@Import(DelegatingWebMvcConfiguration.class)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableWebMvc &#123;</code></pre><p>2）、</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DelegatingWebMvcConfiguration</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurationSupport</span> </span>&#123;</code></pre><p>3）、</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnWebApplication</span><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class,</span><span class="hljs-meta">WebMvcConfigurerAdapter.class &#125;)</span><span class="hljs-comment">//容器中没有这个组件的时候，这个自动配置类才生效</span><span class="hljs-meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span><span class="hljs-meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class,</span><span class="hljs-meta">ValidationAutoConfiguration.class &#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcAutoConfiguration</span> </span>&#123;</code></pre><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p><h2 id="6、RestfulCRUD"><a href="#6、RestfulCRUD" class="headerlink" title="6、RestfulCRUD"></a>6、RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><pre><code class="hljs java"><span class="hljs-comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span><span class="hljs-comment">//@EnableWebMvc   不要接管SpringMVC</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMvcConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;       <span class="hljs-comment">// super.addViewControllers(registry);</span>        <span class="hljs-comment">//浏览器发送 /atguigu 请求来到 success</span>        registry.addViewController(<span class="hljs-string">&quot;/atguigu&quot;</span>).setViewName(<span class="hljs-string">&quot;success&quot;</span>);    &#125;    <span class="hljs-comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将组件注册在容器</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> WebMvcConfigurerAdapter <span class="hljs-title">webMvcConfigurerAdapter</span><span class="hljs-params">()</span></span>&#123;        WebMvcConfigurerAdapter adapter = <span class="hljs-keyword">new</span> WebMvcConfigurerAdapter() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;                registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;login&quot;</span>);                registry.addViewController(<span class="hljs-string">&quot;/index.html&quot;</span>).setViewName(<span class="hljs-string">&quot;login&quot;</span>);            &#125;        &#125;;        <span class="hljs-keyword">return</span> adapter;    &#125;&#125;</code></pre><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="https://i.loli.net/2020/10/26/ypiIJrQhLvPe4Ew.png"></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageSourceAutoConfiguration</span> </span>&#123;        <span class="hljs-comment">/**</span><span class="hljs-comment"> * Comma-separated list of basenames (essentially a fully-qualified classpath</span><span class="hljs-comment"> * location), each following the ResourceBundle convention with relaxed support for</span><span class="hljs-comment"> * slash based locations. If it doesn&#x27;t contain a package qualifier (such as</span><span class="hljs-comment"> * &quot;org.mypackage&quot;), it will be resolved from the classpath root.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> String basename = <span class="hljs-string">&quot;messages&quot;</span>;      <span class="hljs-comment">//我们的配置文件可以直接放在类路径下叫messages.properties；</span>        <span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> MessageSource <span class="hljs-title">messageSource</span><span class="hljs-params">()</span> </span>&#123;ResourceBundleMessageSource messageSource = <span class="hljs-keyword">new</span> ResourceBundleMessageSource();<span class="hljs-keyword">if</span> (StringUtils.hasText(<span class="hljs-keyword">this</span>.basename)) &#123;            <span class="hljs-comment">//设置国际化资源文件的基础名（去掉语言国家代码的）</span>messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(<span class="hljs-keyword">this</span>.basename)));&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.encoding != <span class="hljs-keyword">null</span>) &#123;messageSource.setDefaultEncoding(<span class="hljs-keyword">this</span>.encoding.name());&#125;messageSource.setFallbackToSystemLocale(<span class="hljs-keyword">this</span>.fallbackToSystemLocale);messageSource.setCacheSeconds(<span class="hljs-keyword">this</span>.cacheSeconds);messageSource.setAlwaysUseMessageFormat(<span class="hljs-keyword">this</span>.alwaysUseMessageFormat);<span class="hljs-keyword">return</span> messageSource;&#125;</code></pre><p>3）、去页面获取国际化的值；</p><p><img src="https://i.loli.net/2020/10/26/vUJlRnXKSH1Ep59.png"></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>  <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;author&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Signin Template for Bootstrap<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-comment">&lt;!-- Bootstrap core CSS --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;asserts/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/webjars/bootstrap/4.0.0/css/bootstrap.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- Custom styles for this template --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;asserts/css/signin.css&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/asserts/css/signin.css&#125;&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-signin&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;dashboard.html&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mb-4&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/asserts/img/bootstrap-solid.svg&#125;&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;asserts/img/bootstrap-solid.svg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;72&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;72&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h3 mb-3 font-weight-normal&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.tip&#125;&quot;</span>&gt;</span>Please sign in<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Username&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.username&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">autofocus</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Password&quot;</span> <span class="hljs-attr">th:placeholder</span>=<span class="hljs-string">&quot;#&#123;login.password&#125;&quot;</span> <span class="hljs-attr">required</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;checkbox mb-3&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remember-me&quot;</span>/&gt;</span> [[#&#123;login.remember&#125;]]        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign in<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mt-5 mb-3 text-muted&quot;</span>&gt;</span>© 2017-2018<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>中文<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm&quot;</span>&gt;</span>English<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-meta">@ConditionalOnMissingBean</span><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FixedLocaleResolver(<span class="hljs-keyword">this</span>.mvcProperties.getLocale());&#125;AcceptHeaderLocaleResolver localeResolver = <span class="hljs-keyword">new</span> AcceptHeaderLocaleResolver();localeResolver.setDefaultLocale(<span class="hljs-keyword">this</span>.mvcProperties.getLocale());<span class="hljs-keyword">return</span> localeResolver;&#125;默认的就是根据请求头带来的区域信息获取Locale进行国际化</code></pre><p>4）、点击链接切换国际化</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 可以在连接上携带区域信息</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLocaleResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">LocaleResolver</span> </span>&#123;        <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Locale <span class="hljs-title">resolveLocale</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;        String l = request.getParameter(<span class="hljs-string">&quot;l&quot;</span>);        Locale locale = Locale.getDefault();        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(l))&#123;            String[] split = l.split(<span class="hljs-string">&quot;_&quot;</span>);            locale = <span class="hljs-keyword">new</span> Locale(split[<span class="hljs-number">0</span>],split[<span class="hljs-number">1</span>]);        &#125;        <span class="hljs-keyword">return</span> locale;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLocale</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;    &#125;&#125; <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> LocaleResolver <span class="hljs-title">localeResolver</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyLocaleResolver();    &#125;&#125;</code></pre><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><pre><code class="hljs ini"><span class="hljs-comment"># 禁用缓存</span><span class="hljs-attr">spring.thymeleaf.cache</span>=<span class="hljs-literal">false</span></code></pre><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;msg&#125;&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></code></pre><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 登陆检查，</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginHandlerInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;    <span class="hljs-comment">//目标方法执行之前</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        Object user = request.getSession().getAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>);        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-comment">//未登陆，返回登陆页面</span>            request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;没有权限请先登陆&quot;</span>);            request.getRequestDispatcher(<span class="hljs-string">&quot;/index.html&quot;</span>).forward(request,response);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">//已登陆，放行请求</span>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;    &#125;&#125;</code></pre><p>注册拦截器</p><pre><code class="hljs java"><span class="hljs-comment">//所有的WebMvcConfigurerAdapter组件都会一起起作用</span>  <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//将组件注册在容器</span>  <span class="hljs-function"><span class="hljs-keyword">public</span> WebMvcConfigurerAdapter <span class="hljs-title">webMvcConfigurerAdapter</span><span class="hljs-params">()</span></span>&#123;      WebMvcConfigurerAdapter adapter = <span class="hljs-keyword">new</span> WebMvcConfigurerAdapter() &#123;          <span class="hljs-meta">@Override</span>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> </span>&#123;              registry.addViewController(<span class="hljs-string">&quot;/&quot;</span>).setViewName(<span class="hljs-string">&quot;login&quot;</span>);              registry.addViewController(<span class="hljs-string">&quot;/index.html&quot;</span>).setViewName(<span class="hljs-string">&quot;login&quot;</span>);              registry.addViewController(<span class="hljs-string">&quot;/main.html&quot;</span>).setViewName(<span class="hljs-string">&quot;dashboard&quot;</span>);          &#125;          <span class="hljs-comment">//注册拦截器</span>          <span class="hljs-meta">@Override</span>          <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;              <span class="hljs-comment">//super.addInterceptors(registry);</span>              <span class="hljs-comment">//静态资源；  *.css , *.js</span>              <span class="hljs-comment">//SpringBoot已经做好了静态资源映射</span>              registry.addInterceptor(<span class="hljs-keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)                      .excludePathPatterns(<span class="hljs-string">&quot;/index.html&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;/user/login&quot;</span>);          &#125;      &#125;;      <span class="hljs-keyword">return</span> adapter;  &#125;</code></pre><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><p>2）、实验的请求架构;</p><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><pre><code class="hljs html">1、抽取公共片段<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>2、引入公共片段<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;~&#123;footer :: copy&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>~&#123;templatename::selector&#125;：模板名::选择器~&#123;templatename::fragmentname&#125;:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~&#123;&#125;：行内写法可以加上：[[~&#123;&#125;]];[(~&#123;&#125;)]；</code></pre><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">footer</span> <span class="hljs-attr">th:fragment</span>=<span class="hljs-string">&quot;copy&quot;</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>引入方式<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:insert</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:include</span>=<span class="hljs-string">&quot;footer :: copy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>效果<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>    <span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><p>引入片段的时候传入参数： </p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;col-md-2 d-none d-md-block bg-light sidebar&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sidebar&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sidebar-sticky&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav flex-column&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-item&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav-link active&quot;</span></span><span class="hljs-tag">                   <span class="hljs-attr">th:class</span>=<span class="hljs-string">&quot;$&#123;activeUri==&#x27;main.html&#x27;?&#x27;nav-link active&#x27;:&#x27;nav-link&#x27;&#125;&quot;</span></span><span class="hljs-tag">                   <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/main.html&#125;&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 24 24&quot;</span> <span class="hljs-attr">fill</span>=<span class="hljs-string">&quot;none&quot;</span> <span class="hljs-attr">stroke</span>=<span class="hljs-string">&quot;currentColor&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">stroke-linecap</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">stroke-linejoin</span>=<span class="hljs-string">&quot;round&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;feather feather-home&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">polyline</span> <span class="hljs-attr">points</span>=<span class="hljs-string">&quot;9 22 9 12 15 12 15 22&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">polyline</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span>                    Dashboard <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sr-only&quot;</span>&gt;</span>(current)<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><span class="hljs-comment">&lt;!--引入侧边栏;传入参数--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:replace</span>=<span class="hljs-string">&quot;commons/bar::#sidebar(activeUri=&#x27;emps&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre><h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>LastName<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;zhangsan@atguigu.com&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Gender<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Birth<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p><pre><code class="hljs html"><span class="hljs-comment">&lt;!--需要区分是员工修改还是添加；--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/emp&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--发送put请求修改员工数据--&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）</span><span class="hljs-comment">2、页面创建一个post表单</span><span class="hljs-comment">3、创建一个input项，name=&quot;_method&quot;;值就是我们指定的请求方式</span><span class="hljs-comment">--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>LastName<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;zhangsan&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;?$&#123;emp.lastName&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Email<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;zhangsan@atguigu.com&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;?$&#123;emp.email&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Gender<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==1&#125;&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check form-check-inline&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">th:checked</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;?$&#123;emp.gender==0&#125;&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-check-label&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>department<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-comment">&lt;!--提交的是部门的id--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;department.id&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">th:selected</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;?$&#123;dept.id == emp.department.id&#125;&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;dept.id&#125;&quot;</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;dept:$&#123;depts&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;dept.departmentName&#125;&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-group&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Birth<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;birth&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;zhangsan&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;?$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp!=null&#125;?&#x27;修改&#x27;:&#x27;添加&#x27;&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;emp:$&#123;emps&#125;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>[[$&#123;emp.lastName&#125;]]<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.gender&#125;==0?&#x27;女&#x27;:&#x27;男&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;emp.department.departmentName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;#dates.format(emp.birth, &#x27;yyyy-MM-dd HH:mm&#x27;)&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-primary&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span>&gt;</span>编辑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">th:attr</span>=<span class="hljs-string">&quot;del_uri=@&#123;/emp/&#125;+$&#123;emp.id&#125;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-sm btn-danger deleteBtn&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    $(<span class="hljs-string">&quot;.deleteBtn&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><span class="javascript">        <span class="hljs-comment">//删除当前员工的</span></span><span class="javascript">        $(<span class="hljs-string">&quot;#deleteEmpForm&quot;</span>).attr(<span class="hljs-string">&quot;action&quot;</span>,$(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&quot;del_uri&quot;</span>)).submit();</span><span class="javascript">        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span>    &#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p><p>​        1）、浏览器，返回一个默认的错误页面</p><p><img src="https://i.loli.net/2020/10/26/6zhnjIeTPWAcv1C.png"></p><p>  浏览器发送请求的请求头：</p><p><img src="https://i.loli.net/2020/10/26/sU5zDGErp6nMPHW.png"></p><p>​        2）、如果是其他客户端，默认响应一个json数据</p><p><img src="https://i.loli.net/2020/10/26/KOJoHe19tiZarpL.png"></p><p>​        <img src="https://i.loli.net/2020/10/26/iQLndJqG2RyXAfI.png"></p><p>原理：</p><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>  给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p><pre><code class="hljs java">帮我们在页面共享信息；<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getErrorAttributes</span><span class="hljs-params">(RequestAttributes requestAttributes,</span></span><span class="hljs-function"><span class="hljs-params"><span class="hljs-keyword">boolean</span> includeStackTrace)</span> </span>&#123;Map&lt;String, Object&gt; errorAttributes = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, Object&gt;();errorAttributes.put(<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-keyword">new</span> Date());addStatus(errorAttributes, requestAttributes);addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);addPath(errorAttributes, requestAttributes);<span class="hljs-keyword">return</span> errorAttributes;&#125;</code></pre><p>​    2、BasicErrorController：处理默认/error请求</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicErrorController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractErrorController</span> </span>&#123;        <span class="hljs-meta">@RequestMapping(produces = &quot;text/html&quot;)</span><span class="hljs-comment">//产生html类型的数据；浏览器发送的请求来到这个方法处理</span><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">errorHtml</span><span class="hljs-params">(HttpServletRequest request,</span></span><span class="hljs-function"><span class="hljs-params">HttpServletResponse response)</span> </span>&#123;HttpStatus status = getStatus(request);Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));response.setStatus(status.value());                <span class="hljs-comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span>ModelAndView modelAndView = resolveErrorView(request, response, status, model);<span class="hljs-keyword">return</span> (modelAndView == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;error&quot;</span>, model) : modelAndView);&#125;<span class="hljs-meta">@RequestMapping</span><span class="hljs-meta">@ResponseBody</span>    <span class="hljs-comment">//产生json数据，其他客户端来到这个方法处理；</span><span class="hljs-keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;Map&lt;String, Object&gt; body = getErrorAttributes(request,isIncludeStackTrace(request, MediaType.ALL));HttpStatus status = getStatus(request);<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);&#125;</code></pre><p>​    3、ErrorPageCustomizer：</p><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;error.path:/error&#125;&quot;)</span><span class="hljs-keyword">private</span> String path = <span class="hljs-string">&quot;/error&quot;</span>;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</code></pre><p>​    4、DefaultErrorViewResolver：</p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request, HttpStatus status,</span></span><span class="hljs-function"><span class="hljs-params">Map&lt;String, Object&gt; model)</span> </span>&#123;ModelAndView modelAndView = resolve(String.valueOf(status), model);<span class="hljs-keyword">if</span> (modelAndView == <span class="hljs-keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);&#125;<span class="hljs-keyword">return</span> modelAndView;&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> ModelAndView <span class="hljs-title">resolve</span><span class="hljs-params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;        <span class="hljs-comment">//默认SpringBoot可以去找到一个页面？  error/404</span>String errorViewName = <span class="hljs-string">&quot;error/&quot;</span> + viewName;                <span class="hljs-comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span>TemplateAvailabilityProvider provider = <span class="hljs-keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName, <span class="hljs-keyword">this</span>.applicationContext);<span class="hljs-keyword">if</span> (provider != <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ModelAndView(errorViewName, model);&#125;        <span class="hljs-comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html</span><span class="hljs-keyword">return</span> resolveResource(errorViewName, model);&#125;</code></pre><p>​    步骤：</p><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> ModelAndView <span class="hljs-title">resolveErrorView</span><span class="hljs-params">(HttpServletRequest request,</span></span><span class="hljs-function"><span class="hljs-params">      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;    <span class="hljs-comment">//所有的ErrorViewResolver得到ModelAndView</span>   <span class="hljs-keyword">for</span> (ErrorViewResolver resolver : <span class="hljs-keyword">this</span>.errorViewResolvers) &#123;      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);      <span class="hljs-keyword">if</span> (modelAndView != <span class="hljs-keyword">null</span>) &#123;         <span class="hljs-keyword">return</span> modelAndView;      &#125;   &#125;   <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;</code></pre><h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p><p>​            页面能获取的信息；</p><p>​                timestamp：时间戳</p><p>​                status：状态码</p><p>​                error：错误提示</p><p>​                exception：异常对象</p><p>​                message：异常消息</p><p>​                errors：JSR303数据校验的错误都在这里</p><p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p><p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p><h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyExceptionHandler</span> </span>&#123;    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-meta">@ExceptionHandler(UserNotExistException.class)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">handleException</span><span class="hljs-params">(Exception e)</span></span>&#123;        Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;user.notexist&quot;</span>);        map.put(<span class="hljs-string">&quot;message&quot;</span>,e.getMessage());        <span class="hljs-keyword">return</span> map;    &#125;&#125;<span class="hljs-comment">//没有自适应效果...</span></code></pre><p>​        2）、转发到/error进行自适应响应效果处理</p><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(UserNotExistException.class)</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handleException</span><span class="hljs-params">(Exception e, HttpServletRequest request)</span></span>&#123;       Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();       <span class="hljs-comment">//传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程</span>       <span class="hljs-comment">/**</span><span class="hljs-comment">        * Integer statusCode = (Integer) request</span><span class="hljs-comment">        .getAttribute(&quot;javax.servlet.error.status_code&quot;);</span><span class="hljs-comment">        */</span>       request.setAttribute(<span class="hljs-string">&quot;javax.servlet.error.status_code&quot;</span>,<span class="hljs-number">500</span>);       map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-string">&quot;user.notexist&quot;</span>);       map.put(<span class="hljs-string">&quot;message&quot;</span>,e.getMessage());       <span class="hljs-comment">//转发到/error</span>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/error&quot;</span>;   &#125;</code></pre><h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><pre><code class="hljs java"><span class="hljs-comment">//给容器中加入我们自己定义的ErrorAttributes</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyErrorAttributes</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultErrorAttributes</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getErrorAttributes</span><span class="hljs-params">(RequestAttributes requestAttributes, <span class="hljs-keyword">boolean</span> includeStackTrace)</span> </span>&#123;        Map&lt;String, Object&gt; map = <span class="hljs-keyword">super</span>.getErrorAttributes(requestAttributes, includeStackTrace);        map.put(<span class="hljs-string">&quot;company&quot;</span>,<span class="hljs-string">&quot;atguigu&quot;</span>);        <span class="hljs-keyword">return</span> map;    &#125;&#125;</code></pre><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><p><img src="https://i.loli.net/2020/10/26/wg4a97bVrPGDo6m.png"></p><h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><p><img src="https://i.loli.net/2020/10/26/dXxshpRe86GKNEf.png"></p><p>问题？</p><h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p><pre><code class="hljs properties"><span class="hljs-meta">server.port</span>=<span class="hljs-string">8081</span><span class="hljs-meta">server.context-path</span>=<span class="hljs-string">/crud</span><span class="hljs-meta">server.tomcat.uri-encoding</span>=<span class="hljs-string">UTF-8</span><span class="hljs-attr">//通用的Servlet容器设置</span><span class="hljs-attr">server.xxx</span><span class="hljs-attr">//Tomcat的设置</span><span class="hljs-attr">server.tomcat.xxx</span></code></pre><p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>  <span class="hljs-comment">//一定要将这个定制器加入到容器中</span><span class="hljs-function"><span class="hljs-keyword">public</span> EmbeddedServletContainerCustomizer <span class="hljs-title">embeddedServletContainerCustomizer</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> EmbeddedServletContainerCustomizer() &#123;        <span class="hljs-comment">//定制嵌入式的Servlet容器相关的规则</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customize</span><span class="hljs-params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;            container.setPort(<span class="hljs-number">8083</span>);        &#125;    &#125;;&#125;</code></pre><h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean</p><pre><code class="hljs java"><span class="hljs-comment">//注册三大组件</span><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">myServlet</span><span class="hljs-params">()</span></span>&#123;    ServletRegistrationBean registrationBean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> MyServlet(),<span class="hljs-string">&quot;/myServlet&quot;</span>);    <span class="hljs-keyword">return</span> registrationBean;&#125;</code></pre><p>FilterRegistrationBean</p><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">myFilter</span><span class="hljs-params">()</span></span>&#123;    FilterRegistrationBean registrationBean = <span class="hljs-keyword">new</span> FilterRegistrationBean();    registrationBean.setFilter(<span class="hljs-keyword">new</span> MyFilter());    registrationBean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/hello&quot;</span>,<span class="hljs-string">&quot;/myServlet&quot;</span>));    <span class="hljs-keyword">return</span> registrationBean;&#125;</code></pre><p>ServletListenerRegistrationBean</p><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title">myListener</span><span class="hljs-params">()</span></span>&#123;    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = <span class="hljs-keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="hljs-keyword">new</span> MyListener());    <span class="hljs-keyword">return</span> registrationBean;&#125;</code></pre><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><span class="hljs-meta">@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">dispatcherServletRegistration</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">      DispatcherServlet dispatcherServlet)</span> </span>&#123;   ServletRegistrationBean registration = <span class="hljs-keyword">new</span> ServletRegistrationBean(         dispatcherServlet, <span class="hljs-keyword">this</span>.serverProperties.getServletMapping());    <span class="hljs-comment">//默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp</span>    <span class="hljs-comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span>       registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);   registration.setLoadOnStartup(         <span class="hljs-keyword">this</span>.webMvcProperties.getServlet().getLoadOnStartup());   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.multipartConfig != <span class="hljs-keyword">null</span>) &#123;      registration.setMultipartConfig(<span class="hljs-keyword">this</span>.multipartConfig);   &#125;   <span class="hljs-keyword">return</span> registration;&#125;</code></pre><p>2）、SpringBoot能不能支持其他的Servlet容器；</p><h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src="https://i.loli.net/2020/10/26/ZNegtjTF5XBWKhr.png"></p><p>默认支持：</p><p>Tomcat（默认使用）</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>Jetty</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入web模块 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>Undertow</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 引入web模块 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--引入其他的Servlet容器--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnWebApplication</span><span class="hljs-meta">@Import(BeanPostProcessorsRegistrar.class)</span><span class="hljs-comment">//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件</span><span class="hljs-comment">//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：</span><span class="hljs-comment">//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;        <span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, Tomcat.class &#125;)</span><span class="hljs-comment">//判断当前是否引入了Tomcat依赖；</span><span class="hljs-meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><span class="hljs-comment">//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedTomcat</span> </span>&#123;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="hljs-title">tomcatEmbeddedServletContainerFactory</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TomcatEmbeddedServletContainerFactory();&#125;&#125;        <span class="hljs-comment">/**</span><span class="hljs-comment"> * Nested configuration if Jetty is being used.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, Server.class, Loader.class,</span><span class="hljs-meta">WebAppContext.class &#125;)</span><span class="hljs-meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedJetty</span> </span>&#123;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> JettyEmbeddedServletContainerFactory <span class="hljs-title">jettyEmbeddedServletContainerFactory</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> JettyEmbeddedServletContainerFactory();&#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Nested configuration if Undertow is being used.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnClass(&#123; Servlet.class, Undertow.class, SslClientAuthMode.class &#125;)</span><span class="hljs-meta">@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EmbeddedUndertow</span> </span>&#123;<span class="hljs-meta">@Bean</span><span class="hljs-function"><span class="hljs-keyword">public</span> UndertowEmbeddedServletContainerFactory <span class="hljs-title">undertowEmbeddedServletContainerFactory</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UndertowEmbeddedServletContainerFactory();&#125;&#125;</code></pre><p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmbeddedServletContainerFactory</span> </span>&#123;   <span class="hljs-comment">//获取嵌入式的Servlet容器</span>   <span class="hljs-function">EmbeddedServletContainer <span class="hljs-title">getEmbeddedServletContainer</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">         ServletContextInitializer... initializers)</span></span>;&#125;</code></pre><p><img src="https://i.loli.net/2020/10/26/6dQxZPkgtK7Iusi.png"></p><p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p><p><img src="https://i.loli.net/2020/10/26/WyxOd6XfI5g7zVh.png"></p><p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> EmbeddedServletContainer <span class="hljs-title">getEmbeddedServletContainer</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">      ServletContextInitializer... initializers)</span> </span>&#123;    <span class="hljs-comment">//创建一个Tomcat</span>   Tomcat tomcat = <span class="hljs-keyword">new</span> Tomcat();        <span class="hljs-comment">//配置Tomcat的基本环节</span>   File baseDir = (<span class="hljs-keyword">this</span>.baseDirectory != <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">this</span>.baseDirectory         : createTempDir(<span class="hljs-string">&quot;tomcat&quot;</span>));   tomcat.setBaseDir(baseDir.getAbsolutePath());   Connector connector = <span class="hljs-keyword">new</span> Connector(<span class="hljs-keyword">this</span>.protocol);   tomcat.getService().addConnector(connector);   customizeConnector(connector);   tomcat.setConnector(connector);   tomcat.getHost().setAutoDeploy(<span class="hljs-keyword">false</span>);   configureEngine(tomcat.getEngine());   <span class="hljs-keyword">for</span> (Connector additionalConnector : <span class="hljs-keyword">this</span>.additionalTomcatConnectors) &#123;      tomcat.getService().addConnector(additionalConnector);   &#125;   prepareContext(tomcat.getHost(), initializers);        <span class="hljs-comment">//将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器</span>   <span class="hljs-keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);&#125;</code></pre><p>4）、我们对嵌入式容器的配置修改是怎么生效？</p><pre><code class="hljs plain">ServerProperties、EmbeddedServletContainerCustomizer</code></pre><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><pre><code class="hljs java"><span class="hljs-comment">//初始化之前</span><span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span></span><span class="hljs-function">      <span class="hljs-keyword">throws</span> BeansException </span>&#123;    <span class="hljs-comment">//如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件</span>   <span class="hljs-keyword">if</span> (bean <span class="hljs-keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;       <span class="hljs-comment">//</span>      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);   &#125;   <span class="hljs-keyword">return</span> bean;&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">ConfigurableEmbeddedServletContainer bean)</span> </span>&#123;    <span class="hljs-comment">//获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；</span>    <span class="hljs-keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;        customizer.customize(bean);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="hljs-title">getCustomizers</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.customizers == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-comment">// Look up does not include the parent context</span>        <span class="hljs-keyword">this</span>.customizers = <span class="hljs-keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(            <span class="hljs-keyword">this</span>.beanFactory            <span class="hljs-comment">//从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer</span>            <span class="hljs-comment">//定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件</span>            .getBeansOfType(EmbeddedServletContainerCustomizer.class,                            <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>)            .values());        Collections.sort(<span class="hljs-keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);        <span class="hljs-keyword">this</span>.customizers = Collections.unmodifiableList(<span class="hljs-keyword">this</span>.customizers);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.customizers;&#125;ServerProperties也是定制器</code></pre><p>步骤：</p><p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p><p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p><p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p><p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p><p>###5）、嵌入式Servlet容器启动原理；</p><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p><p>获取嵌入式的Servlet容器工厂：</p><p>1）、SpringBoot应用启动运行run方法</p><p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p><p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException </span>&#123;   <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.startupShutdownMonitor) &#123;      <span class="hljs-comment">// Prepare this context for refreshing.</span>      prepareRefresh();      <span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span>      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();      <span class="hljs-comment">// Prepare the bean factory for use in this context.</span>      prepareBeanFactory(beanFactory);      <span class="hljs-keyword">try</span> &#123;         <span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span>         postProcessBeanFactory(beanFactory);         <span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span>         invokeBeanFactoryPostProcessors(beanFactory);         <span class="hljs-comment">// Register bean processors that intercept bean creation.</span>         registerBeanPostProcessors(beanFactory);         <span class="hljs-comment">// Initialize message source for this context.</span>         initMessageSource();         <span class="hljs-comment">// Initialize event multicaster for this context.</span>         initApplicationEventMulticaster();         <span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span>         onRefresh();         <span class="hljs-comment">// Check for listener beans and register them.</span>         registerListeners();         <span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span>         finishBeanFactoryInitialization(beanFactory);         <span class="hljs-comment">// Last step: publish corresponding event.</span>         finishRefresh();      &#125;      <span class="hljs-keyword">catch</span> (BeansException ex) &#123;         <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;            logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +                  <span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);         &#125;         <span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span>         destroyBeans();         <span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span>         cancelRefresh(ex);         <span class="hljs-comment">// Propagate exception to caller.</span>         <span class="hljs-keyword">throw</span> ex;      &#125;      <span class="hljs-keyword">finally</span> &#123;         <span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span>         <span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span>         resetCommonCaches();      &#125;   &#125;&#125;</code></pre><p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p><p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p><p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p><p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p><p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p><p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong>==IOC容器启动创建嵌入式的Servlet容器==</strong></p><h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>​        优点：简单、便携；</p><p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p><p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p><p>2）、将嵌入式的Tomcat指定为provided；</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServletInitializer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span> </span>&#123;   <span class="hljs-meta">@Override</span>   <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder application)</span> </span>&#123;       <span class="hljs-comment">//传入SpringBoot应用的主程序</span>      <span class="hljs-keyword">return</span> application.sources(SpringBoot04WebJspApplication.class);   &#125;&#125;</code></pre><p>4）、启动服务器就可以使用；</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p><p>servlet3.0（Spring注解版）：</p><p>8.2.4 Shared libraries / runtimes pluggability：</p><p>规则：</p><p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p><p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p><p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p><p>流程：</p><p>1）、启动Tomcat</p><p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p><p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p><p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p><p><img src="https://i.loli.net/2020/10/26/I2VphlZkMf8zts4.png"></p><p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p><p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title">createRootApplicationContext</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">      ServletContext servletContext)</span> </span>&#123;    <span class="hljs-comment">//1、创建SpringApplicationBuilder</span>   SpringApplicationBuilder builder = createSpringApplicationBuilder();   StandardServletEnvironment environment = <span class="hljs-keyword">new</span> StandardServletEnvironment();   environment.initPropertySources(servletContext, <span class="hljs-keyword">null</span>);   builder.environment(environment);   builder.main(getClass());   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);   <span class="hljs-keyword">if</span> (parent != <span class="hljs-keyword">null</span>) &#123;      <span class="hljs-keyword">this</span>.logger.info(<span class="hljs-string">&quot;Root context already created (using as parent).&quot;</span>);      servletContext.setAttribute(            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="hljs-keyword">null</span>);      builder.initializers(<span class="hljs-keyword">new</span> ParentContextApplicationContextInitializer(parent));   &#125;   builder.initializers(         <span class="hljs-keyword">new</span> ServletContextApplicationContextInitializer(servletContext));   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);        <span class="hljs-comment">//调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来</span>   builder = configure(builder);        <span class="hljs-comment">//使用builder创建一个Spring应用</span>   SpringApplication application = builder.build();   <span class="hljs-keyword">if</span> (application.getSources().isEmpty() &amp;&amp; AnnotationUtils         .findAnnotation(getClass(), Configuration.class) != <span class="hljs-keyword">null</span>) &#123;      application.getSources().add(getClass());   &#125;   Assert.state(!application.getSources().isEmpty(),         <span class="hljs-string">&quot;No SpringApplication sources have been defined. Either override the &quot;</span>               + <span class="hljs-string">&quot;configure method or add an @Configuration annotation&quot;</span>);   <span class="hljs-comment">// Ensure error pages are registered</span>   <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.registerErrorPageFilter) &#123;      application.getSources().add(ErrorPageFilterConfiguration.class);   &#125;    <span class="hljs-comment">//启动Spring应用</span>   <span class="hljs-keyword">return</span> run(application);&#125;</code></pre><p>7）、Spring的应用就启动并且创建IOC容器</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title">run</span><span class="hljs-params">(String... args)</span> </span>&#123;   StopWatch stopWatch = <span class="hljs-keyword">new</span> StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = <span class="hljs-keyword">null</span>;   FailureAnalyzers analyzers = <span class="hljs-keyword">null</span>;   configureHeadlessProperty();   SpringApplicationRunListeners listeners = getRunListeners(args);   listeners.starting();   <span class="hljs-keyword">try</span> &#123;      ApplicationArguments applicationArguments = <span class="hljs-keyword">new</span> DefaultApplicationArguments(            args);      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);      Banner printedBanner = printBanner(environment);      context = createApplicationContext();      analyzers = <span class="hljs-keyword">new</span> FailureAnalyzers(context);      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);              <span class="hljs-comment">//刷新IOC容器</span>      refreshContext(context);      afterRefresh(context, applicationArguments);      listeners.finished(context, <span class="hljs-keyword">null</span>);      stopWatch.stop();      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logStartupInfo) &#123;         <span class="hljs-keyword">new</span> StartupInfoLogger(<span class="hljs-keyword">this</span>.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      &#125;      <span class="hljs-keyword">return</span> context;   &#125;   <span class="hljs-keyword">catch</span> (Throwable ex) &#123;      handleRunFailure(context, listeners, analyzers, ex);      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(ex);   &#125;&#125;</code></pre><p><strong>==启动Servlet容器，再启动SpringBoot应用==</strong></p><h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src="https://i.loli.net/2020/10/26/AMEoTDCm3I65fgy.png"></p><p><img src="https://i.loli.net/2020/10/26/S3j9fORPxmE6cQJ.png"></p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p><img src="https://i.loli.net/2020/10/26/FpiCDBwlr76jVze.png"></p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p><p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p><p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p><p>​    4）、使用客户端连接linux服务器进行命令操作；</p><p>​    5）、设置虚拟机网络；</p><p>​        桥接网络===选好网卡====接入网线；</p><p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p><pre><code class="hljs shell">service network restart</code></pre><p>​    7）、查看linux的ip地址</p><pre><code class="hljs shell">ip addr</code></pre><p>​    8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p><pre><code class="hljs shell">1、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker</code></pre><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><pre><code class="hljs shell">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档</code></pre><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><pre><code class="hljs shell">docker pull mysql</code></pre><p>错误的启动</p><pre><code class="hljs shell">[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_goldstinec4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified   You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</code></pre><p>正确的启动</p><pre><code class="hljs shell">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESb874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</code></pre><p>做了端口映射</p><pre><code class="hljs shell">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMESad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</code></pre><p>几个其他的高级操作</p><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker <span class="hljs-builtin-name">run</span> --name some-mysql -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=my-secret-pw -d mysql:tag <span class="hljs-attribute">--character-set-server</span>=utf8mb4 <span class="hljs-attribute">--collation-server</span>=utf8mb4_unicode_ci指定mysql的一些配置参数</code></pre><h1 id="六、SpringBoot与数据访问"><a href="#六、SpringBoot与数据访问" class="headerlink" title="六、SpringBoot与数据访问"></a>六、SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.15.22:3306/jdbc</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span></code></pre><p>效果：</p><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p><p>​    数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p><p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>2、SpringBoot默认可以支持；</p><pre><code class="hljs css"><span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.tomcat</span><span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.pool</span><span class="hljs-selector-class">.DataSource</span>、<span class="hljs-selector-tag">HikariDataSource</span>、<span class="hljs-selector-tag">BasicDataSource</span>、</code></pre><p>3、自定义数据源类型</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Generic DataSource configuration.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@ConditionalOnMissingBean(DataSource.class)</span><span class="hljs-meta">@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)</span><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Generic</span> </span>&#123;   <span class="hljs-meta">@Bean</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">dataSource</span><span class="hljs-params">(DataSourceProperties properties)</span> </span>&#123;       <span class="hljs-comment">//使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性</span>      <span class="hljs-keyword">return</span> properties.initializeDataSourceBuilder().build();   &#125;&#125;</code></pre><p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p><p>​    作用：</p><p>​        1）、runSchemaScripts();运行建表语句；</p><p>​        2）、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><pre><code class="hljs properties"><span class="hljs-attr">schema-*.sql、data-*.sql</span><span class="hljs-attr">默认规则：schema.sql，schema-all.sql；</span><span class="hljs-meta">可以使用</span>   <span class="hljs-string"></span><span class="hljs-attr">schema</span>:<span class="hljs-string"></span>      <span class="hljs-meta">-</span> <span class="hljs-string">classpath:department.sql</span>      <span class="hljs-attr">指定位置</span></code></pre><p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><pre><code class="hljs java">导入druid数据源<span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DruidConfig</span> </span>&#123;    <span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> DataSource <span class="hljs-title">druid</span><span class="hljs-params">()</span></span>&#123;       <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> DruidDataSource();    &#125;    <span class="hljs-comment">//配置Druid的监控</span>    <span class="hljs-comment">//1、配置一个管理后台的Servlet</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">statViewServlet</span><span class="hljs-params">()</span></span>&#123;        ServletRegistrationBean bean = <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> StatViewServlet(), <span class="hljs-string">&quot;/druid/*&quot;</span>);        Map&lt;String,String&gt; initParams = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        initParams.put(<span class="hljs-string">&quot;loginUsername&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>);        initParams.put(<span class="hljs-string">&quot;loginPassword&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);        initParams.put(<span class="hljs-string">&quot;allow&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//默认就是允许所有访问</span>        initParams.put(<span class="hljs-string">&quot;deny&quot;</span>,<span class="hljs-string">&quot;192.168.15.21&quot;</span>);        bean.setInitParameters(initParams);        <span class="hljs-keyword">return</span> bean;    &#125;    <span class="hljs-comment">//2、配置一个web监控的filter</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title">webStatFilter</span><span class="hljs-params">()</span></span>&#123;        FilterRegistrationBean bean = <span class="hljs-keyword">new</span> FilterRegistrationBean();        bean.setFilter(<span class="hljs-keyword">new</span> WebStatFilter());        Map&lt;String,String&gt; initParams = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        initParams.put(<span class="hljs-string">&quot;exclusions&quot;</span>,<span class="hljs-string">&quot;*.js,*.css,/druid/*&quot;</span>);        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList(<span class="hljs-string">&quot;/*&quot;</span>));        <span class="hljs-keyword">return</span>  bean;    &#125;&#125;</code></pre><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p><img src="https://i.loli.net/2020/10/26/qczCX4ZA5RN82W1.png"></p><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）</p><p>​    2）、给数据库建表</p><p>​    3）、创建JavaBean</p><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><pre><code class="hljs java"><span class="hljs-comment">//指定这是一个操作数据库的mapper</span><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;    <span class="hljs-meta">@Select(&quot;select * from department where id=#&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDeptById</span><span class="hljs-params">(Integer id)</span></span>;    <span class="hljs-meta">@Delete(&quot;delete from department where id=#&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteDeptById</span><span class="hljs-params">(Integer id)</span></span>;    <span class="hljs-meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span>    <span class="hljs-meta">@Insert(&quot;insert into department(departmentName) values(#&#123;departmentName&#125;)&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertDept</span><span class="hljs-params">(Department department)</span></span>;    <span class="hljs-meta">@Update(&quot;update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateDept</span><span class="hljs-params">(Department department)</span></span>;&#125;</code></pre><p>问题：</p><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><pre><code class="hljs java"><span class="hljs-meta">@org</span>.springframework.context.annotation.Configuration<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ConfigurationCustomizer <span class="hljs-title">configurationCustomizer</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ConfigurationCustomizer()&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">customize</span><span class="hljs-params">(Configuration configuration)</span> </span>&#123;                configuration.setMapUnderscoreToCamelCase(<span class="hljs-keyword">true</span>);            &#125;        &#125;;    &#125;&#125;</code></pre><pre><code class="hljs java">使用MapperScan批量扫描所有的Mapper接口；<span class="hljs-meta">@MapperScan(value = &quot;com.atguigu.springboot.mapper&quot;)</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringBoot06DataMybatisApplication</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);&#125;&#125;</code></pre><h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><pre><code class="hljs yaml"><span class="hljs-attr">mybatis:</span>  <span class="hljs-attr">config-location:</span> <span class="hljs-string">classpath:mybatis/mybatis-config.xml</span> <span class="hljs-string">指定全局配置文件的位置</span>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mybatis/mapper/*.xml</span>  <span class="hljs-string">指定sql映射文件的位置</span></code></pre><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p><img src="https://i.loli.net/2020/10/26/XxZ9adTPNSED31B.png"></p><h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p><p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p><pre><code class="hljs java"><span class="hljs-comment">//使用JPA注解配置映射关系</span><span class="hljs-meta">@Entity</span> <span class="hljs-comment">//告诉JPA这是一个实体类（和数据表映射的类）</span><span class="hljs-meta">@Table(name = &quot;tbl_user&quot;)</span> <span class="hljs-comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@Id</span> <span class="hljs-comment">//这是一个主键</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><span class="hljs-comment">//自增主键</span>    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-meta">@Column(name = &quot;last_name&quot;,length = 50)</span> <span class="hljs-comment">//这是和数据表对应的一个列</span>    <span class="hljs-keyword">private</span> String lastName;    <span class="hljs-meta">@Column</span> <span class="hljs-comment">//省略默认列名就是属性名</span>    <span class="hljs-keyword">private</span> String email;</code></pre><p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p><pre><code class="hljs java"><span class="hljs-comment">//继承JpaRepository来完成对数据库的操作</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span>&lt;<span class="hljs-title">User</span>,<span class="hljs-title">Integer</span>&gt; </span>&#123;&#125;</code></pre><p>3）、基本的配置JpaProperties</p><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>   <span class="hljs-attr">jpa:</span>    <span class="hljs-attr">hibernate:</span><span class="hljs-comment">#     更新或者创建数据表结构</span>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><span class="hljs-comment">#    控制台显示SQL</span>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span></code></pre><h1 id="七、启动配置原理"><a href="#七、启动配置原理" class="headerlink" title="七、启动配置原理"></a>七、启动配置原理</h1><p>几个重要的事件回调机制</p><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>SpringApplicationRunListener</strong></p><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><p>启动流程：</p><h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><pre><code class="hljs java">initialize(sources);<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(Object[] sources)</span> </span>&#123;    <span class="hljs-comment">//保存主配置类</span>    <span class="hljs-keyword">if</span> (sources != <span class="hljs-keyword">null</span> &amp;&amp; sources.length &gt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">this</span>.sources.addAll(Arrays.asList(sources));    &#125;    <span class="hljs-comment">//判断当前是否一个web应用</span>    <span class="hljs-keyword">this</span>.webEnvironment = deduceWebEnvironment();    <span class="hljs-comment">//从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来</span>    setInitializers((Collection) getSpringFactoriesInstances(        ApplicationContextInitializer.class));    <span class="hljs-comment">//从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener</span>    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));    <span class="hljs-comment">//从多个配置类中找到有main方法的主配置类</span>    <span class="hljs-keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();&#125;</code></pre><p><img src="https://i.loli.net/2020/10/26/7CwkAHqJzVpjZBM.png"></p><p><img src="https://i.loli.net/2020/10/26/NFewVQUXq4a7sru.png"></p><h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title">run</span><span class="hljs-params">(String... args)</span> </span>&#123;   StopWatch stopWatch = <span class="hljs-keyword">new</span> StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = <span class="hljs-keyword">null</span>;   FailureAnalyzers analyzers = <span class="hljs-keyword">null</span>;   configureHeadlessProperty();       <span class="hljs-comment">//获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories</span>   SpringApplicationRunListeners listeners = getRunListeners(args);    <span class="hljs-comment">//回调所有的获取SpringApplicationRunListener.starting()方法</span>   listeners.starting();   <span class="hljs-keyword">try</span> &#123;       <span class="hljs-comment">//封装命令行参数</span>      ApplicationArguments applicationArguments = <span class="hljs-keyword">new</span> DefaultApplicationArguments(            args);      <span class="hljs-comment">//准备环境</span>      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);       <span class="hljs-comment">//创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成</span>             Banner printedBanner = printBanner(environment);              <span class="hljs-comment">//创建ApplicationContext；决定创建web的ioc还是普通的ioc</span>      context = createApplicationContext();             analyzers = <span class="hljs-keyword">new</span> FailureAnalyzers(context);       <span class="hljs-comment">//准备上下文环境;将environment保存到ioc中；而且applyInitializers()；</span>       <span class="hljs-comment">//applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法</span>       <span class="hljs-comment">//回调所有的SpringApplicationRunListener的contextPrepared()；</span>       <span class="hljs-comment">//</span>      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);       <span class="hljs-comment">//prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；</span>              <span class="hljs-comment">//s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版</span>       <span class="hljs-comment">//扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）</span>      refreshContext(context);       <span class="hljs-comment">//从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调</span>       <span class="hljs-comment">//ApplicationRunner先回调，CommandLineRunner再回调</span>      afterRefresh(context, applicationArguments);       <span class="hljs-comment">//所有的SpringApplicationRunListener回调finished方法</span>      listeners.finished(context, <span class="hljs-keyword">null</span>);      stopWatch.stop();      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logStartupInfo) &#123;         <span class="hljs-keyword">new</span> StartupInfoLogger(<span class="hljs-keyword">this</span>.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      &#125;       <span class="hljs-comment">//整个SpringBoot应用启动完成以后返回启动的ioc容器；</span>      <span class="hljs-keyword">return</span> context;   &#125;   <span class="hljs-keyword">catch</span> (Throwable ex) &#123;      handleRunFailure(context, listeners, analyzers, ex);      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(ex);   &#125;&#125;</code></pre><h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloApplicationContextInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationContextInitializer</span>&lt;<span class="hljs-title">ConfigurableApplicationContext</span>&gt; </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;ApplicationContextInitializer...initialize...&quot;</span>+applicationContext);    &#125;&#125;</code></pre><p><strong>SpringApplicationRunListener</strong></p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloSpringApplicationRunListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SpringApplicationRunListener</span> </span>&#123;    <span class="hljs-comment">//必须有的构造器</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HelloSpringApplicationRunListener</span><span class="hljs-params">(SpringApplication application, String[] args)</span></span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">starting</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;SpringApplicationRunListener...starting...&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">environmentPrepared</span><span class="hljs-params">(ConfigurableEnvironment environment)</span> </span>&#123;        Object o = environment.getSystemProperties().get(<span class="hljs-string">&quot;os.name&quot;</span>);        System.out.println(<span class="hljs-string">&quot;SpringApplicationRunListener...environmentPrepared..&quot;</span>+o);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextPrepared</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;SpringApplicationRunListener...contextPrepared...&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextLoaded</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;SpringApplicationRunListener...contextLoaded...&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finished</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;SpringApplicationRunListener...finished...&quot;</span>);    &#125;&#125;</code></pre><p>配置（META-INF/spring.factories）</p><pre><code class="hljs properties"><span class="hljs-meta">org.springframework.context.ApplicationContextInitializer</span>=<span class="hljs-string">\</span><span class="hljs-attr">com.atguigu.springboot.listener.HelloApplicationContextInitializer</span><span class="hljs-meta">org.springframework.boot.SpringApplicationRunListener</span>=<span class="hljs-string">\</span><span class="hljs-attr">com.atguigu.springboot.listener.HelloSpringApplicationRunListener</span></code></pre><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloApplicationRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ApplicationRunner</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(ApplicationArguments args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;ApplicationRunner...run....&quot;</span>);    &#125;&#125;</code></pre><p><strong>CommandLineRunner</strong></p><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloCommandLineRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CommandLineRunner</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String... args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        System.out.println(<span class="hljs-string">&quot;CommandLineRunner...run...&quot;</span>+ Arrays.asList(args));    &#125;&#125;</code></pre><h1 id="八、自定义starter"><a href="#八、自定义starter" class="headerlink" title="八、自定义starter"></a>八、自定义starter</h1><p>starter：</p><p>​    1、这个场景需要使用到的依赖是什么？</p><p>​    2、如何编写自动配置</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//指定这个类是一个配置类</span><span class="hljs-meta">@ConditionalOnXXX</span>  <span class="hljs-comment">//在指定条件成立的情况下自动配置类生效</span><span class="hljs-meta">@AutoConfigureAfter</span>  <span class="hljs-comment">//指定自动配置类的顺序</span><span class="hljs-meta">@Bean</span>  <span class="hljs-comment">//给容器中添加组件</span><span class="hljs-meta">@ConfigurationPropertie</span>结合相关xxxProperties类来绑定相关的配置<span class="hljs-meta">@EnableConfigurationProperties</span> <span class="hljs-comment">//让xxxProperties生效加入到容器中</span>自动配置类要能加载将需要启动就加载的自动配置类，配置在META-INF/spring.factoriesorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</code></pre><p>​    3、模式：</p><p>启动器只用来做依赖导入；</p><p>专门来写一个自动配置模块；</p><p>启动器依赖自动配置；别人只需要引入启动器（starter）</p><p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p><p>步骤：</p><p>1）、启动器模块</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.starter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atguigu-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-comment">&lt;!--启动器--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--引入自动配置模块--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.starter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>2）、自动配置模块</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">   <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.atguigu.starter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>atguigu-spring-boot-starter-autoconfigurer<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.10.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>      <span class="hljs-comment">&lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.starter;<span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<span class="hljs-meta">@ConfigurationProperties(prefix = &quot;atguigu.hello&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloProperties</span> </span>&#123;    <span class="hljs-keyword">private</span> String prefix;    <span class="hljs-keyword">private</span> String suffix;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPrefix</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> prefix;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPrefix</span><span class="hljs-params">(String prefix)</span> </span>&#123;        <span class="hljs-keyword">this</span>.prefix = prefix;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getSuffix</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> suffix;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSuffix</span><span class="hljs-params">(String suffix)</span> </span>&#123;        <span class="hljs-keyword">this</span>.suffix = suffix;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.starter;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloService</span> </span>&#123;    HelloProperties helloProperties;    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloProperties <span class="hljs-title">getHelloProperties</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> helloProperties;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHelloProperties</span><span class="hljs-params">(HelloProperties helloProperties)</span> </span>&#123;        <span class="hljs-keyword">this</span>.helloProperties = helloProperties;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">sayHellAtguigu</span><span class="hljs-params">(String name)</span></span>&#123;        <span class="hljs-keyword">return</span> helloProperties.getPrefix()+<span class="hljs-string">&quot;-&quot;</span> +name + helloProperties.getSuffix();    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.starter;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;<span class="hljs-keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@ConditionalOnWebApplication</span> <span class="hljs-comment">//web应用才生效</span><span class="hljs-meta">@EnableConfigurationProperties(HelloProperties.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServiceAutoConfiguration</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    HelloProperties helloProperties;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloService <span class="hljs-title">helloService</span><span class="hljs-params">()</span></span>&#123;        HelloService service = <span class="hljs-keyword">new</span> HelloService();        service.setHelloProperties(helloProperties);        <span class="hljs-keyword">return</span> service;    &#125;&#125;</code></pre><h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>群晖相关配置</title>
    <link href="/2020/06/13/%E7%BE%A4%E6%99%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/06/13/%E7%BE%A4%E6%99%96%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>简介：群晖相关</p><a id="more"></a><h3 id="群晖安装-EMBY"><a href="#群晖安装-EMBY" class="headerlink" title="群晖安装 EMBY"></a>群晖安装 EMBY</h3><p>原文地址 <a href="https://post.smzdm.com/p/ax08eov9/">安装 EMBY 教程</a><br>emby官方github 说明:<a href="https://github.com/MediaBrowser/Wiki/wiki/Synology-:-Custom-Package-Architectures-for-XPEnology">github</a>.</p><p><a href="https://synology.emby.media/?package_repository=360efc6e-de72-4073-b603-2bfbd7001586&package_architecture=xpen-core2">群晖 emby链接</a></p><h3 id="群晖社区套件"><a href="#群晖社区套件" class="headerlink" title="群晖社区套件"></a>群晖社区套件</h3><p> <a href="http://packages.synocommunity.com/">群晖社区套件</a></p><h3 id="transmission配置"><a href="#transmission配置" class="headerlink" title="transmission配置"></a>transmission配置</h3><p>原文地址:<a href="https://post.smzdm.com/p/aqndk95v/">链接</a><br>主要是主题美化<br><code>wget https://raw.githubusercontent.com/ronggang/transmission-web-control/master/release/install-tr-control-cn.sh</code></p><h3 id="calibre-webserver"><a href="#calibre-webserver" class="headerlink" title="calibre-webserver"></a>calibre-webserver</h3><p><img src="https://i.loli.net/2020/10/26/CbrzpavndR8gk3e.png" alt="映射"><br>批量添加书籍:calibredb add –library-path=/data/books/library/ -r /data/books/upload/</p><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><p>源:<br><code>#阿里源 deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</code></p><h2 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h2><p>apt install python3-pip</p><h2 id="pip换源"><a href="#pip换源" class="headerlink" title="pip换源"></a>pip换源</h2><p><a href="https://yq.aliyun.com/articles/652884">更换（Pypi）pip源到国内镜像</a></p><p>修改 : $HOME/.config/pip/pip.conf</p><p>修改内容如下：</p><p>[global]</p><p>index-url = <a href="https://pypi.tuna.tsinghua.edu.cn/simple12">https://pypi.tuna.tsinghua.edu.cn/simple12</a></p><h3 id="更换-mac-地址"><a href="#更换-mac-地址" class="headerlink" title="更换 mac 地址"></a>更换 mac 地址</h3><p>mkdir -p /tmp/boot<br>第四步：切换到dev目录</p><p>cd /dev<br>第五步：将synoboot1 分区挂载到boot</p><p>mount -t vfat synoboot1 /tmp/boot/</p>]]></content>
    
    
    
    <tags>
      
      <tag>群晖</tag>
      
      <tag>ubuntu</tag>
      
      <tag>pip</tag>
      
      <tag>calibre</tag>
      
      <tag>emby</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端常用命令（转）</title>
    <link href="/2019/10/20/%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <url>/2019/10/20/%E7%BB%88%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="1、目录操作"><a href="#1、目录操作" class="headerlink" title="1、目录操作"></a>1、目录操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>cd</td><td>打开当前目录</td><td>cd dirname</td></tr><tr><td>pwd</td><td>显示当前目录的路径名</td><td>pwd</td></tr><tr><td>ls</td><td>显示当前目录的内容</td><td>ls -la</td></tr><tr><td>dircmp</td><td>比较两个目录的内容</td><td>dircmp dir1 dir2</td></tr><tr><td>mkdir</td><td>创建一个目录</td><td>mkdir dirname</td></tr><tr><td>rmdir</td><td>删除一个目录</td><td>rmdir dirname</td></tr><tr><td>mvdir</td><td>移动或重命名一个目录</td><td>mvdir dir1 dir2</td></tr></tbody></table><h4 id="2、文件操作"><a href="#2、文件操作" class="headerlink" title="2、文件操作"></a>2、文件操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>cat</td><td>显示或连接文件</td><td>cat filename</td></tr><tr><td>ln</td><td>联接文件</td><td>ln -s file1 file2</td></tr><tr><td>find</td><td>使用匹配表达式查找文件</td><td>find . -name “*.c” -print</td></tr><tr><td>file</td><td>显示文件类型</td><td>file filename</td></tr><tr><td>open</td><td>使用默认的程序打开文件</td><td>open filename</td></tr><tr><td>od</td><td>显示非文本文件的内容</td><td>od -c filename</td></tr><tr><td>cp</td><td>复制文件或目录</td><td>cp file1 file2</td></tr><tr><td>rm</td><td>删除文件或目录</td><td>rm filename</td></tr><tr><td>mv</td><td>改变文件名或所在目录</td><td>mv file1 file2</td></tr><tr><td>pg</td><td>分页格式化显示文件内容</td><td>pg filename</td></tr><tr><td>more</td><td>分屏显示文件内容</td><td>more filename</td></tr></tbody></table><h4 id="3、选择操作"><a href="#3、选择操作" class="headerlink" title="3、选择操作"></a>3、选择操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>comm</td><td>显示两有序文件的公共和非公共</td><td>comm file1 file2</td></tr><tr><td>wc</td><td>统计文件的字符数、词数和行数</td><td>wc filename</td></tr><tr><td>nl</td><td>给文件加上行号</td><td>nl file1 &gt;file2</td></tr><tr><td>awk</td><td>在文件中查找并处理模式</td><td>awk ‘{print $1 $1}’ filename</td></tr><tr><td>sort</td><td>排序或归并文件</td><td>sort -d -f -u file1</td></tr><tr><td>uniq</td><td>去掉文件中的重复行</td><td>uniq file1 file2</td></tr><tr><td>diff</td><td>比较并显示两个文件的差异</td><td>diff file1 file2</td></tr><tr><td>sed</td><td>非交互方式流编辑器</td><td>sed “s/red/green/g” filename</td></tr><tr><td>grep</td><td>在文件中按模式查找</td><td>grep “[<a href="#fn1">1]</a>“ filename</td></tr><tr><td>cut</td><td>显示文件每行中的某些域</td><td>cut -f1,7 -d: /etc/passwd</td></tr><tr><td>colrm</td><td>从标准输入中删除若干colrm 8 20 file2</td><td></td></tr><tr><td>paste</td><td>横向连接文件</td><td>paste file1 file2</td></tr><tr><td>head</td><td>显示文件的最初几行</td><td>head -20 filename</td></tr><tr><td>tail</td><td>显示文件的最后几行</td><td>tail -15 filename</td></tr></tbody></table><h4 id="4、安全操作"><a href="#4、安全操作" class="headerlink" title="4、安全操作"></a>4、安全操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>chown</td><td>改变文件或目录的属主</td><td>chown newowner filename</td></tr><tr><td>chgrp</td><td>改变文件或目录的所属组</td><td>chgrp staff filename</td></tr><tr><td>xlock</td><td>给终端上锁</td><td>xlock -remote</td></tr></tbody></table><pre><code class="hljs plain">修改用户密码passwd复制代码</code></pre><p>chmod|改变文件或目录的权限|chmod ug+x filename umask|定义创建文件的权限掩码|umask 027</p><h4 id="5、编程操作"><a href="#5、编程操作" class="headerlink" title="5、编程操作"></a>5、编程操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>touch</td><td>更新文件的访问和修改时间</td><td>touch -m 05202400 filename</td></tr><tr><td>dbx</td><td>命令行界面调试工具</td><td>dbx a.out</td></tr><tr><td>xde</td><td>图形用户界面调试工具</td><td>xde a.out</td></tr><tr><td>make</td><td>维护可执行程序的最新版本</td><td>make</td></tr></tbody></table><h4 id="6、进程操作"><a href="#6、进程操作" class="headerlink" title="6、进程操作"></a>6、进程操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>nice</td><td>改变待执行命令的优先级</td><td>nice cc -c *.c</td></tr><tr><td>renice</td><td>改变已运行进程的优先级</td><td>renice +20 32768</td></tr><tr><td>ps</td><td>显示进程当前状态</td><td>ps u</td></tr><tr><td>kill</td><td>终止进程</td><td>kill -9 30142</td></tr><tr><td>nice</td><td>改变待执行命令的优先级</td><td>nice cc -c *.c</td></tr><tr><td>renice</td><td>改变已运行进程的优先级</td><td>renice +20 32768</td></tr></tbody></table><h4 id="7、时间操作"><a href="#7、时间操作" class="headerlink" title="7、时间操作"></a>7、时间操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>date</td><td>显示系统的当前日期和时间</td><td>date</td></tr><tr><td>cal</td><td>显示日历</td><td>cal 8 1996</td></tr><tr><td>time</td><td>统计程序的执行时间</td><td>time a.out</td></tr></tbody></table><h4 id="8、网络与通信操作"><a href="#8、网络与通信操作" class="headerlink" title="8、网络与通信操作"></a>8、网络与通信操作</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>mail</td><td>阅读和发送电子邮件</td><td>mail</td></tr><tr><td>write</td><td>给另一用户发送报文</td><td>write username pts/1</td></tr><tr><td>mesg</td><td>允许或拒绝接收报文</td><td>mesg n</td></tr><tr><td>ftp</td><td>在本地主机与远程主机之间传输文件</td><td>ftp ftp.sp.net.edu.cn</td></tr><tr><td>rcp</td><td>在本地主机与远程主机 之间复制文件</td><td>rcp file1 host1:file2</td></tr><tr><td>ping</td><td>给一个网络主机发送 回应请求</td><td>ping hpc.sp.net.edu.cn</td></tr><tr><td>telnet</td><td>远程登录</td><td>telnet hpc.sp.net.edu.cn</td></tr><tr><td>rlogin</td><td>远程登录</td><td>rlogin hostname -l username</td></tr><tr><td>rsh</td><td>在远程主机执行指定命令</td><td>rsh f01n03 date</td></tr></tbody></table><h4 id="9、Korn-Shell-命令"><a href="#9、Korn-Shell-命令" class="headerlink" title="9、Korn Shell 命令"></a>9、Korn Shell 命令</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>history</td><td>列出最近执行过的 几条命令及编号</td><td>history</td></tr><tr><td>r</td><td>重复执行最近执行过的 某条命令</td><td>r -2</td></tr><tr><td>alias</td><td>给某个命令定义别名</td><td>alias del=rm -i</td></tr><tr><td>unalias</td><td>取消对某个别名的定义</td><td>unalias del</td></tr></tbody></table><h4 id="10、其它命令"><a href="#10、其它命令" class="headerlink" title="10、其它命令"></a>10、其它命令</h4><table><thead><tr><th>命令名</th><th>功能描述</th><th>使用举例</th></tr></thead><tbody><tr><td>stty</td><td>显示或重置控制键定义</td><td>stty -a</td></tr><tr><td>du</td><td>查询磁盘使用情况</td><td>du -k subdir</td></tr><tr><td>df</td><td>显示文件系统的总空间和可用空间</td><td>df /tmp</td></tr><tr><td>w</td><td>显示当前系统活动的总信息</td><td>w</td></tr><tr><td>env</td><td>显示当前所有设置过的环境变量</td><td>env</td></tr><tr><td>who</td><td>列出当前登录的所有用户</td><td>who</td></tr><tr><td>whoami</td><td>显示当前正进行操作的用户名</td><td>whoami</td></tr><tr><td>tty</td><td>显示终端或伪终端的名称</td><td>tty</td></tr><tr><td>uname</td><td>显示操作系统的有关信息</td><td>uname -a</td></tr><tr><td>clear</td><td>清除屏幕或窗口内容</td><td>clear</td></tr></tbody></table><blockquote><p>作者：FBY展菲链接：<a href="https://juejin.im/post/5a3a32db6fb9a04503103d11">https://juejin.im/post/5a3a32db6fb9a04503103d11</a> 来源：掘金著作权归作者所有。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>终端</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime Text 3 部分常用快捷键</title>
    <link href="/2019/10/16/Sublime-Text-3-%E9%83%A8%E5%88%86%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2019/10/16/Sublime-Text-3-%E9%83%A8%E5%88%86%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-操作"><a href="#1-操作" class="headerlink" title="1.操作"></a>1.操作</h2><p>Ctrl + `： 打开Sublime Text控制台（Esc退出）<br>Ctrl+Shift+P：打开命令面板（Esc退出）<br>Ctrl + K, Ctrl + B： 组合键，显示或隐藏侧栏<br>Alt ：光标调到菜单栏，↑↓←→ 移动光标</p><h2 id="2-编辑"><a href="#2-编辑" class="headerlink" title="2.编辑"></a>2.编辑</h2><p>Ctr+Shift+D：复制粘贴光标所在行<br>Alt+.：关闭标签<br>Ctrl+/：用//注释当前行。<br>Ctrl+Shift+/：用/**/注释。<br>Ctrl + Enter： 在当前行下面新增一行然后跳至该行<br>Ctrl + Shift + Enter： 在当前行上面增加一行并跳至该行<br>Ctrl + ←/→： 进行逐词移动，<br>Ctrl + Shift + ←/→： 进行逐词选择<br>Ctrl + Shift + ↑/↓： 移动当前行（文件会被修改）<br>Ctrl+KK ：从光标处删除至行尾<br>Ctrl+K Backspace ：从光标处删除至行首<br>Ctrl+Z：撤销<br>Ctrl+Y：恢复撤销<br>Ctrl+J：合并行（已选择需要合并的多行时）<br>Ctrl + [： 选中内容向左缩进<br>Ctrl + ]： 选中内容向右缩进</p><h2 id="3-选择"><a href="#3-选择" class="headerlink" title="3.选择"></a>3.选择</h2><p>Alt+F3：选中关键词后，选中所有相同的词。可以配合Ctrl+D使用。<br>Ctrl + D Ctrl + K Ctrl + U：Ctrl + D选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl + D，会选择该词出现的下一个位置。在多重选词的过程中，Ctrl + K会将当前选中的词进行跳过在多重选词的过程中，Ctrl + U进行回退<br>Ctrl+L ：选择光标所在整行<br>Ctrl+X：删除光标所在行<br>Ctrl + J： 把当前选中区域合并为一行<br>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</p><h2 id="4-查找"><a href="#4-查找" class="headerlink" title="4.查找"></a>4.查找</h2><p>（如果有窗口弹出都是Esc退出弹出窗口）<br>Ctr+p：输入@显示容器（css或者js里面）<br>Ctrl + F： 调出搜索框<br>Ctrl + H： 调出替换框进行替换<br>Ctrl + Shift + H： 输入替换内容后，替换当前关键字<br>Ctrl + Alt + Enter： 输入替换内容后，替换所有匹配关键字。(NOTE: 注意此时如果鼠标焦点在编辑窗口中，则替换失败，将鼠标焦点调到替换框中，Ctrl + Alt + Enter才会起作用)<br>Ctrl + Shift + F： 开启多文件搜索&amp;替换<br>Alt + C： 切换大小写敏感（Case-sensitive）模式<br>Alt + W： 切换整字匹配（Whole matching）模式<br>Alt + R： 切换正则匹配模式的开启/关闭</p><h2 id="5-跳转"><a href="#5-跳转" class="headerlink" title="5.跳转"></a>5.跳转</h2><p>Ctrl + P：列出当前打开的文件（或者是当前文件夹的文件），输入文件名然后 Enter 跳转至该文件，输入@symbol跳转到symbol符号所在的位置，输入#keyword跳转到keyword所在的位置，输入:n跳转到文件的第n行<br>Ctrl + R：列出当前文件中的符号（例如类名和函数名，但无法深入到变量名），输入符号名称 Enter 即可以跳转到该处。<br>会列出Markdown文件的大纲<br>F12： 快速跳转到当前光标所在符号的定义处（Jump to Definition）。比如当前光标所在为一个函数调用，F12会跳转至该函数的定义处。<br>Ctrl + G： 输入行号以跳转到指定行<br>Ctrl+M：跳转到括号另一半。</p><h2 id="6-窗口和Tab页"><a href="#6-窗口和Tab页" class="headerlink" title="6.窗口和Tab页"></a>6.窗口和Tab页</h2><p>Ctrl + N： 在当前窗口创建一个新标签<br>Ctrl + Shift + N： 创建一个新窗口（该快捷键 和搜狗输入法快捷键冲突）<br>Ctrl + W： 关闭标签页，如果没有标签页了，则关闭该窗口<br>Ctrl+Shift+W：关闭所有打开文件<br>Ctrl + Shift + T： 恢复刚刚关闭的标签。<br>Ctrl +Tag：移动标签。</p><h2 id="7-屏幕"><a href="#7-屏幕" class="headerlink" title="7.屏幕"></a>7.屏幕</h2><p>F11： 切换普通全屏<br>Shift + F11： 切换无干扰全屏<br>Alt + Shift + 2： 进行左右分屏<br>Alt + Shift + 8进行上下分屏<br>Alt + Shift + 5进行上下左右分屏（即分为四屏）<br>Ctrl + 数字键： 跳转到指定屏<br>Ctrl + Shift + 数字键： 将当前屏移动到指定屏</p>]]></content>
    
    
    
    <tags>
      
      <tag>快捷键</tag>
      
      <tag>Sublime</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 学习笔记</title>
    <link href="/2019/10/16/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/10/16/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>##关于作用域</p><ul><li>let:定义一个块级作用域，表示作用域只有一个块，</li><li>const:定义一个常量，值不可更改。作用域同样</li><li>var: 局部作用域与全局。<pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;        <span class="hljs-comment">//</span>    &#125;    i += <span class="hljs-number">100</span>; <span class="hljs-comment">// 仍然可以引用变量i</span>&#125;<span class="hljs-meta">&#x27;use strict&#x27;</span>;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;        sum += i;    &#125;    <span class="hljs-comment">// SyntaxError:</span>    i += <span class="hljs-number">1</span>;&#125;</code></pre></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA快捷键学习与界面熟悉笔记</title>
    <link href="/2019/10/14/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%95%8C%E9%9D%A2%E7%86%9F%E6%82%89%E7%AC%94%E8%AE%B0/"/>
    <url>/2019/10/14/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%95%8C%E9%9D%A2%E7%86%9F%E6%82%89%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>来自一个地址：忘记从哪里来的了</p></blockquote><p><img src="https://i.loli.net/2020/10/26/4DL65terChSW2F9.png"></p><p>###一篇文章地址<br><a href="https://zhuanlan.zhihu.com/p/36305203">这里</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>IDEA</tag>
      
      <tag>快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
